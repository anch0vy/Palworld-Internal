#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UniqueRideWeapon_Minigun

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_UniqueRideWeapon_RapidBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_UniqueRideWeapon_Minigun.BP_UniqueRideWeapon_Minigun_C
// 0x0018 (0x05C0 - 0x05A8)
class ABP_UniqueRideWeapon_Minigun_C final : public ABP_UniqueRideWeapon_RapidBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_UniqueRideWeapon_Minigun_C;      // 0x05A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 SkeletalMesh_0;                                    // 0x05B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRotateBarrel;                                    // 0x05B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_UniqueRideWeapon_Minigun(int32 EntryPoint);
	void GetAllMeshComponent(TArray<class UMeshComponent*>* OutMesh);
	TSubclassOf<class AActor> GetAmmoClass();
	struct FTransform GetAmmoEjectTransform();
	TSubclassOf<class APalBullet> GetBulletClass();
	float GetBulrAngle();
	class UNiagaraSystem* GetMuzzleEffect();
	struct FVector GetMuzzleLocation();
	struct FRotator GetMuzzleRotation();
	void GetShootInterval(double* Time);
	void OnPlayFireLoopSound();
	void OnPullTrigger();
	void OnReleaseTrigger();
	void PlayFireLoopSound();
	void ReceiveTick(float DeltaSeconds);
	void ShootBulletBP();
	void StopFireLoopSound();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_UniqueRideWeapon_Minigun_C">();
	}
	static class ABP_UniqueRideWeapon_Minigun_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_UniqueRideWeapon_Minigun_C>();
	}
};
static_assert(alignof(ABP_UniqueRideWeapon_Minigun_C) == 0x000008, "Wrong alignment on ABP_UniqueRideWeapon_Minigun_C");
static_assert(sizeof(ABP_UniqueRideWeapon_Minigun_C) == 0x0005C0, "Wrong size on ABP_UniqueRideWeapon_Minigun_C");
static_assert(offsetof(ABP_UniqueRideWeapon_Minigun_C, UberGraphFrame_BP_UniqueRideWeapon_Minigun_C) == 0x0005A8, "Member 'ABP_UniqueRideWeapon_Minigun_C::UberGraphFrame_BP_UniqueRideWeapon_Minigun_C' has a wrong offset!");
static_assert(offsetof(ABP_UniqueRideWeapon_Minigun_C, SkeletalMesh_0) == 0x0005B0, "Member 'ABP_UniqueRideWeapon_Minigun_C::SkeletalMesh_0' has a wrong offset!");
static_assert(offsetof(ABP_UniqueRideWeapon_Minigun_C, IsRotateBarrel) == 0x0005B8, "Member 'ABP_UniqueRideWeapon_Minigun_C::IsRotateBarrel' has a wrong offset!");

}

