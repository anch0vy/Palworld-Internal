#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UniqueRideWeapon_Minigun

#include "Basic.hpp"

#include "Pal_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_UniqueRideWeapon_Minigun.BP_UniqueRideWeapon_Minigun_C.ExecuteUbergraph_BP_UniqueRideWeapon_Minigun
// 0x0010 (0x0010 - 0x0000)
struct BP_UniqueRideWeapon_Minigun_C_ExecuteUbergraph_BP_UniqueRideWeapon_Minigun final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanUse_ReturnValue;                       // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanUse_ReturnValue_1;                     // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanUse_ReturnValue_2;                     // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_UniqueRideWeapon_Minigun_C_ExecuteUbergraph_BP_UniqueRideWeapon_Minigun) == 0x000004, "Wrong alignment on BP_UniqueRideWeapon_Minigun_C_ExecuteUbergraph_BP_UniqueRideWeapon_Minigun");
static_assert(sizeof(BP_UniqueRideWeapon_Minigun_C_ExecuteUbergraph_BP_UniqueRideWeapon_Minigun) == 0x000010, "Wrong size on BP_UniqueRideWeapon_Minigun_C_ExecuteUbergraph_BP_UniqueRideWeapon_Minigun");
static_assert(offsetof(BP_UniqueRideWeapon_Minigun_C_ExecuteUbergraph_BP_UniqueRideWeapon_Minigun, EntryPoint) == 0x000000, "Member 'BP_UniqueRideWeapon_Minigun_C_ExecuteUbergraph_BP_UniqueRideWeapon_Minigun::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_UniqueRideWeapon_Minigun_C_ExecuteUbergraph_BP_UniqueRideWeapon_Minigun, Temp_bool_Has_Been_Initd_Variable) == 0x000004, "Member 'BP_UniqueRideWeapon_Minigun_C_ExecuteUbergraph_BP_UniqueRideWeapon_Minigun::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_UniqueRideWeapon_Minigun_C_ExecuteUbergraph_BP_UniqueRideWeapon_Minigun, Temp_bool_IsClosed_Variable) == 0x000005, "Member 'BP_UniqueRideWeapon_Minigun_C_ExecuteUbergraph_BP_UniqueRideWeapon_Minigun::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_UniqueRideWeapon_Minigun_C_ExecuteUbergraph_BP_UniqueRideWeapon_Minigun, CallFunc_CanUse_ReturnValue) == 0x000006, "Member 'BP_UniqueRideWeapon_Minigun_C_ExecuteUbergraph_BP_UniqueRideWeapon_Minigun::CallFunc_CanUse_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UniqueRideWeapon_Minigun_C_ExecuteUbergraph_BP_UniqueRideWeapon_Minigun, CallFunc_CanUse_ReturnValue_1) == 0x000007, "Member 'BP_UniqueRideWeapon_Minigun_C_ExecuteUbergraph_BP_UniqueRideWeapon_Minigun::CallFunc_CanUse_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_UniqueRideWeapon_Minigun_C_ExecuteUbergraph_BP_UniqueRideWeapon_Minigun, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'BP_UniqueRideWeapon_Minigun_C_ExecuteUbergraph_BP_UniqueRideWeapon_Minigun::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_UniqueRideWeapon_Minigun_C_ExecuteUbergraph_BP_UniqueRideWeapon_Minigun, CallFunc_CanUse_ReturnValue_2) == 0x00000C, "Member 'BP_UniqueRideWeapon_Minigun_C_ExecuteUbergraph_BP_UniqueRideWeapon_Minigun::CallFunc_CanUse_ReturnValue_2' has a wrong offset!");

// Function BP_UniqueRideWeapon_Minigun.BP_UniqueRideWeapon_Minigun_C.GetAllMeshComponent
// 0x0028 (0x0028 - 0x0000)
struct BP_UniqueRideWeapon_Minigun_C_GetAllMeshComponent final
{
public:
	TArray<class UMeshComponent*>                 OutMesh;                                           // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<class UMeshComponent*>                 NewLocalVar_0;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_UniqueRideWeapon_Minigun_C_GetAllMeshComponent) == 0x000008, "Wrong alignment on BP_UniqueRideWeapon_Minigun_C_GetAllMeshComponent");
static_assert(sizeof(BP_UniqueRideWeapon_Minigun_C_GetAllMeshComponent) == 0x000028, "Wrong size on BP_UniqueRideWeapon_Minigun_C_GetAllMeshComponent");
static_assert(offsetof(BP_UniqueRideWeapon_Minigun_C_GetAllMeshComponent, OutMesh) == 0x000000, "Member 'BP_UniqueRideWeapon_Minigun_C_GetAllMeshComponent::OutMesh' has a wrong offset!");
static_assert(offsetof(BP_UniqueRideWeapon_Minigun_C_GetAllMeshComponent, NewLocalVar_0) == 0x000010, "Member 'BP_UniqueRideWeapon_Minigun_C_GetAllMeshComponent::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(BP_UniqueRideWeapon_Minigun_C_GetAllMeshComponent, CallFunc_Array_Add_ReturnValue) == 0x000020, "Member 'BP_UniqueRideWeapon_Minigun_C_GetAllMeshComponent::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_UniqueRideWeapon_Minigun.BP_UniqueRideWeapon_Minigun_C.GetAmmoClass
// 0x0008 (0x0008 - 0x0000)
struct BP_UniqueRideWeapon_Minigun_C_GetAmmoClass final
{
public:
	TSubclassOf<class AActor>                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(BP_UniqueRideWeapon_Minigun_C_GetAmmoClass) == 0x000008, "Wrong alignment on BP_UniqueRideWeapon_Minigun_C_GetAmmoClass");
static_assert(sizeof(BP_UniqueRideWeapon_Minigun_C_GetAmmoClass) == 0x000008, "Wrong size on BP_UniqueRideWeapon_Minigun_C_GetAmmoClass");
static_assert(offsetof(BP_UniqueRideWeapon_Minigun_C_GetAmmoClass, ReturnValue) == 0x000000, "Member 'BP_UniqueRideWeapon_Minigun_C_GetAmmoClass::ReturnValue' has a wrong offset!");

// Function BP_UniqueRideWeapon_Minigun.BP_UniqueRideWeapon_Minigun_C.GetAmmoEjectTransform
// 0x00C0 (0x00C0 - 0x0000)
struct BP_UniqueRideWeapon_Minigun_C_GetAmmoEjectTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0060(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_UniqueRideWeapon_Minigun_C_GetAmmoEjectTransform) == 0x000010, "Wrong alignment on BP_UniqueRideWeapon_Minigun_C_GetAmmoEjectTransform");
static_assert(sizeof(BP_UniqueRideWeapon_Minigun_C_GetAmmoEjectTransform) == 0x0000C0, "Wrong size on BP_UniqueRideWeapon_Minigun_C_GetAmmoEjectTransform");
static_assert(offsetof(BP_UniqueRideWeapon_Minigun_C_GetAmmoEjectTransform, ReturnValue) == 0x000000, "Member 'BP_UniqueRideWeapon_Minigun_C_GetAmmoEjectTransform::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UniqueRideWeapon_Minigun_C_GetAmmoEjectTransform, CallFunc_GetSocketTransform_ReturnValue) == 0x000060, "Member 'BP_UniqueRideWeapon_Minigun_C_GetAmmoEjectTransform::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");

// Function BP_UniqueRideWeapon_Minigun.BP_UniqueRideWeapon_Minigun_C.GetBulletClass
// 0x0008 (0x0008 - 0x0000)
struct BP_UniqueRideWeapon_Minigun_C_GetBulletClass final
{
public:
	TSubclassOf<class APalBullet>                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(BP_UniqueRideWeapon_Minigun_C_GetBulletClass) == 0x000008, "Wrong alignment on BP_UniqueRideWeapon_Minigun_C_GetBulletClass");
static_assert(sizeof(BP_UniqueRideWeapon_Minigun_C_GetBulletClass) == 0x000008, "Wrong size on BP_UniqueRideWeapon_Minigun_C_GetBulletClass");
static_assert(offsetof(BP_UniqueRideWeapon_Minigun_C_GetBulletClass, ReturnValue) == 0x000000, "Member 'BP_UniqueRideWeapon_Minigun_C_GetBulletClass::ReturnValue' has a wrong offset!");

// Function BP_UniqueRideWeapon_Minigun.BP_UniqueRideWeapon_Minigun_C.GetBulrAngle
// 0x0004 (0x0004 - 0x0000)
struct BP_UniqueRideWeapon_Minigun_C_GetBulrAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_UniqueRideWeapon_Minigun_C_GetBulrAngle) == 0x000004, "Wrong alignment on BP_UniqueRideWeapon_Minigun_C_GetBulrAngle");
static_assert(sizeof(BP_UniqueRideWeapon_Minigun_C_GetBulrAngle) == 0x000004, "Wrong size on BP_UniqueRideWeapon_Minigun_C_GetBulrAngle");
static_assert(offsetof(BP_UniqueRideWeapon_Minigun_C_GetBulrAngle, ReturnValue) == 0x000000, "Member 'BP_UniqueRideWeapon_Minigun_C_GetBulrAngle::ReturnValue' has a wrong offset!");

// Function BP_UniqueRideWeapon_Minigun.BP_UniqueRideWeapon_Minigun_C.GetMuzzleEffect
// 0x0008 (0x0008 - 0x0000)
struct BP_UniqueRideWeapon_Minigun_C_GetMuzzleEffect final
{
public:
	class UNiagaraSystem*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_UniqueRideWeapon_Minigun_C_GetMuzzleEffect) == 0x000008, "Wrong alignment on BP_UniqueRideWeapon_Minigun_C_GetMuzzleEffect");
static_assert(sizeof(BP_UniqueRideWeapon_Minigun_C_GetMuzzleEffect) == 0x000008, "Wrong size on BP_UniqueRideWeapon_Minigun_C_GetMuzzleEffect");
static_assert(offsetof(BP_UniqueRideWeapon_Minigun_C_GetMuzzleEffect, ReturnValue) == 0x000000, "Member 'BP_UniqueRideWeapon_Minigun_C_GetMuzzleEffect::ReturnValue' has a wrong offset!");

// Function BP_UniqueRideWeapon_Minigun.BP_UniqueRideWeapon_Minigun_C.GetMuzzleLocation
// 0x0030 (0x0030 - 0x0000)
struct BP_UniqueRideWeapon_Minigun_C_GetMuzzleLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_UniqueRideWeapon_Minigun_C_GetMuzzleLocation) == 0x000008, "Wrong alignment on BP_UniqueRideWeapon_Minigun_C_GetMuzzleLocation");
static_assert(sizeof(BP_UniqueRideWeapon_Minigun_C_GetMuzzleLocation) == 0x000030, "Wrong size on BP_UniqueRideWeapon_Minigun_C_GetMuzzleLocation");
static_assert(offsetof(BP_UniqueRideWeapon_Minigun_C_GetMuzzleLocation, ReturnValue) == 0x000000, "Member 'BP_UniqueRideWeapon_Minigun_C_GetMuzzleLocation::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UniqueRideWeapon_Minigun_C_GetMuzzleLocation, CallFunc_GetSocketLocation_ReturnValue) == 0x000018, "Member 'BP_UniqueRideWeapon_Minigun_C_GetMuzzleLocation::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");

// Function BP_UniqueRideWeapon_Minigun.BP_UniqueRideWeapon_Minigun_C.GetMuzzleRotation
// 0x0030 (0x0030 - 0x0000)
struct BP_UniqueRideWeapon_Minigun_C_GetMuzzleRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_GetSocketRotation_ReturnValue;            // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_UniqueRideWeapon_Minigun_C_GetMuzzleRotation) == 0x000008, "Wrong alignment on BP_UniqueRideWeapon_Minigun_C_GetMuzzleRotation");
static_assert(sizeof(BP_UniqueRideWeapon_Minigun_C_GetMuzzleRotation) == 0x000030, "Wrong size on BP_UniqueRideWeapon_Minigun_C_GetMuzzleRotation");
static_assert(offsetof(BP_UniqueRideWeapon_Minigun_C_GetMuzzleRotation, ReturnValue) == 0x000000, "Member 'BP_UniqueRideWeapon_Minigun_C_GetMuzzleRotation::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UniqueRideWeapon_Minigun_C_GetMuzzleRotation, CallFunc_GetSocketRotation_ReturnValue) == 0x000018, "Member 'BP_UniqueRideWeapon_Minigun_C_GetMuzzleRotation::CallFunc_GetSocketRotation_ReturnValue' has a wrong offset!");

// Function BP_UniqueRideWeapon_Minigun.BP_UniqueRideWeapon_Minigun_C.GetShootInterval
// 0x0008 (0x0008 - 0x0000)
struct BP_UniqueRideWeapon_Minigun_C_GetShootInterval final
{
public:
	double                                        Time;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_UniqueRideWeapon_Minigun_C_GetShootInterval) == 0x000008, "Wrong alignment on BP_UniqueRideWeapon_Minigun_C_GetShootInterval");
static_assert(sizeof(BP_UniqueRideWeapon_Minigun_C_GetShootInterval) == 0x000008, "Wrong size on BP_UniqueRideWeapon_Minigun_C_GetShootInterval");
static_assert(offsetof(BP_UniqueRideWeapon_Minigun_C_GetShootInterval, Time) == 0x000000, "Member 'BP_UniqueRideWeapon_Minigun_C_GetShootInterval::Time' has a wrong offset!");

// Function BP_UniqueRideWeapon_Minigun.BP_UniqueRideWeapon_Minigun_C.PlayFireLoopSound
// 0x0008 (0x0008 - 0x0000)
struct BP_UniqueRideWeapon_Minigun_C_PlayFireLoopSound final
{
public:
	struct FPalDataTableRowName_SoundID           K2Node_MakeStruct_PalDataTableRowName_SoundID;     // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_UniqueRideWeapon_Minigun_C_PlayFireLoopSound) == 0x000004, "Wrong alignment on BP_UniqueRideWeapon_Minigun_C_PlayFireLoopSound");
static_assert(sizeof(BP_UniqueRideWeapon_Minigun_C_PlayFireLoopSound) == 0x000008, "Wrong size on BP_UniqueRideWeapon_Minigun_C_PlayFireLoopSound");
static_assert(offsetof(BP_UniqueRideWeapon_Minigun_C_PlayFireLoopSound, K2Node_MakeStruct_PalDataTableRowName_SoundID) == 0x000000, "Member 'BP_UniqueRideWeapon_Minigun_C_PlayFireLoopSound::K2Node_MakeStruct_PalDataTableRowName_SoundID' has a wrong offset!");

// Function BP_UniqueRideWeapon_Minigun.BP_UniqueRideWeapon_Minigun_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_UniqueRideWeapon_Minigun_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_UniqueRideWeapon_Minigun_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_UniqueRideWeapon_Minigun_C_ReceiveTick");
static_assert(sizeof(BP_UniqueRideWeapon_Minigun_C_ReceiveTick) == 0x000004, "Wrong size on BP_UniqueRideWeapon_Minigun_C_ReceiveTick");
static_assert(offsetof(BP_UniqueRideWeapon_Minigun_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_UniqueRideWeapon_Minigun_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_UniqueRideWeapon_Minigun.BP_UniqueRideWeapon_Minigun_C.ShootBulletBP
// 0x0001 (0x0001 - 0x0000)
struct BP_UniqueRideWeapon_Minigun_C_ShootBulletBP final
{
public:
	bool                                          CallFunc_CanUse_ReturnValue;                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_UniqueRideWeapon_Minigun_C_ShootBulletBP) == 0x000001, "Wrong alignment on BP_UniqueRideWeapon_Minigun_C_ShootBulletBP");
static_assert(sizeof(BP_UniqueRideWeapon_Minigun_C_ShootBulletBP) == 0x000001, "Wrong size on BP_UniqueRideWeapon_Minigun_C_ShootBulletBP");
static_assert(offsetof(BP_UniqueRideWeapon_Minigun_C_ShootBulletBP, CallFunc_CanUse_ReturnValue) == 0x000000, "Member 'BP_UniqueRideWeapon_Minigun_C_ShootBulletBP::CallFunc_CanUse_ReturnValue' has a wrong offset!");

// Function BP_UniqueRideWeapon_Minigun.BP_UniqueRideWeapon_Minigun_C.StopFireLoopSound
// 0x0008 (0x0008 - 0x0000)
struct BP_UniqueRideWeapon_Minigun_C_StopFireLoopSound final
{
public:
	struct FPalDataTableRowName_SoundID           K2Node_MakeStruct_PalDataTableRowName_SoundID;     // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_UniqueRideWeapon_Minigun_C_StopFireLoopSound) == 0x000004, "Wrong alignment on BP_UniqueRideWeapon_Minigun_C_StopFireLoopSound");
static_assert(sizeof(BP_UniqueRideWeapon_Minigun_C_StopFireLoopSound) == 0x000008, "Wrong size on BP_UniqueRideWeapon_Minigun_C_StopFireLoopSound");
static_assert(offsetof(BP_UniqueRideWeapon_Minigun_C_StopFireLoopSound, K2Node_MakeStruct_PalDataTableRowName_SoundID) == 0x000000, "Member 'BP_UniqueRideWeapon_Minigun_C_StopFireLoopSound::K2Node_MakeStruct_PalDataTableRowName_SoundID' has a wrong offset!");

}

