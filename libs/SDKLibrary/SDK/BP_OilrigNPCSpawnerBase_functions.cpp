#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_OilrigNPCSpawnerBase

#include "Basic.hpp"

#include "BP_OilrigNPCSpawnerBase_classes.hpp"
#include "BP_OilrigNPCSpawnerBase_parameters.hpp"


namespace SDK
{

// Function BP_OilrigNPCSpawnerBase.BP_OilrigNPCSpawnerBase_C.Despawn
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPalIndividualCharacterHandle*    Handle                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_OilrigNPCSpawnerBase_C::Despawn(class UPalIndividualCharacterHandle* Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_OilrigNPCSpawnerBase_C", "Despawn");

	Params::BP_OilrigNPCSpawnerBase_C_Despawn Parms{};

	Parms.Handle = Handle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_OilrigNPCSpawnerBase.BP_OilrigNPCSpawnerBase_C.Despawn Delegate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPalInstanceID                   ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_OilrigNPCSpawnerBase_C::Despawn_Delegate(const struct FPalInstanceID& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_OilrigNPCSpawnerBase_C", "Despawn Delegate");

	Params::BP_OilrigNPCSpawnerBase_C_Despawn_Delegate Parms{};

	Parms.ID = std::move(ID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_OilrigNPCSpawnerBase.BP_OilrigNPCSpawnerBase_C.ExecuteUbergraph_BP_OilrigNPCSpawnerBase
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_OilrigNPCSpawnerBase_C::ExecuteUbergraph_BP_OilrigNPCSpawnerBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_OilrigNPCSpawnerBase_C", "ExecuteUbergraph_BP_OilrigNPCSpawnerBase");

	Params::BP_OilrigNPCSpawnerBase_C_ExecuteUbergraph_BP_OilrigNPCSpawnerBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_OilrigNPCSpawnerBase.BP_OilrigNPCSpawnerBase_C.ExistSpawnableCollision
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Exist                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_OilrigNPCSpawnerBase_C::ExistSpawnableCollision(bool* Exist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_OilrigNPCSpawnerBase_C", "ExistSpawnableCollision");

	Params::BP_OilrigNPCSpawnerBase_C_ExistSpawnableCollision Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Exist != nullptr)
		*Exist = Parms.Exist;
}


// Function BP_OilrigNPCSpawnerBase.BP_OilrigNPCSpawnerBase_C.InitializeSpawnedCharacter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPalIndividualCharacterHandle*    Handle                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_OilrigNPCSpawnerBase_C::InitializeSpawnedCharacter(class UPalIndividualCharacterHandle* Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_OilrigNPCSpawnerBase_C", "InitializeSpawnedCharacter");

	Params::BP_OilrigNPCSpawnerBase_C_InitializeSpawnedCharacter Parms{};

	Parms.Handle = Handle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_OilrigNPCSpawnerBase.BP_OilrigNPCSpawnerBase_C.IsNearAnyPlayer
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsNear                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_OilrigNPCSpawnerBase_C::IsNearAnyPlayer(double Distance, bool* IsNear)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_OilrigNPCSpawnerBase_C", "IsNearAnyPlayer");

	Params::BP_OilrigNPCSpawnerBase_C_IsNearAnyPlayer Parms{};

	Parms.Distance = Distance;

	UObject::ProcessEvent(Func, &Parms);

	if (IsNear != nullptr)
		*IsNear = Parms.IsNear;
}


// Function BP_OilrigNPCSpawnerBase.BP_OilrigNPCSpawnerBase_C.On Spawn Otomo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      HolderController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APalCharacter*                    OtomoPal                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_OilrigNPCSpawnerBase_C::On_Spawn_Otomo(class AController* HolderController, class APalCharacter* OtomoPal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_OilrigNPCSpawnerBase_C", "On Spawn Otomo");

	Params::BP_OilrigNPCSpawnerBase_C_On_Spawn_Otomo Parms{};

	Parms.HolderController = HolderController;
	Parms.OtomoPal = OtomoPal;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_OilrigNPCSpawnerBase.BP_OilrigNPCSpawnerBase_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_OilrigNPCSpawnerBase_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_OilrigNPCSpawnerBase_C", "ReceiveEndPlay");

	Params::BP_OilrigNPCSpawnerBase_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_OilrigNPCSpawnerBase.BP_OilrigNPCSpawnerBase_C.RequestSpawn
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_OilrigNPCSpawnerBase_C::RequestSpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_OilrigNPCSpawnerBase_C", "RequestSpawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_OilrigNPCSpawnerBase.BP_OilrigNPCSpawnerBase_C.Spawn
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CharacterID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_Level                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UPalIndividualCharacterHandle*    Handle                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_OilrigNPCSpawnerBase_C::Spawn(class FName CharacterID, int32 Param_Level, const struct FVector& Location, const struct FRotator& Rotation, class UPalIndividualCharacterHandle** Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_OilrigNPCSpawnerBase_C", "Spawn");

	Params::BP_OilrigNPCSpawnerBase_C_Spawn Parms{};

	Parms.CharacterID = CharacterID;
	Parms.Param_Level = Param_Level;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);

	if (Handle != nullptr)
		*Handle = Parms.Handle;
}


// Function BP_OilrigNPCSpawnerBase.BP_OilrigNPCSpawnerBase_C.Spawn Delegate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPalInstanceID                   ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_OilrigNPCSpawnerBase_C::Spawn_Delegate(const struct FPalInstanceID& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_OilrigNPCSpawnerBase_C", "Spawn Delegate");

	Params::BP_OilrigNPCSpawnerBase_C_Spawn_Delegate Parms{};

	Parms.ID = std::move(ID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_OilrigNPCSpawnerBase.BP_OilrigNPCSpawnerBase_C.SpawnOneNPC
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_OilrigNPCSpawnerBase_C::SpawnOneNPC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_OilrigNPCSpawnerBase_C", "SpawnOneNPC");

	UObject::ProcessEvent(Func, nullptr);
}

}

