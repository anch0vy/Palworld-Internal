#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_PickingGame_ForDisplay

#include "Basic.hpp"

#include "Pal_structs.hpp"
#include "Pal_classes.hpp"
#include "Engine_structs.hpp"
#include "CommonInput_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_PickingGame_ForDisplay.WBP_PickingGame_ForDisplay_C
// 0x01A8 (0x05D8 - 0x0430)
class UWBP_PickingGame_ForDisplay_C final : public UPalUIPickingGame
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0430(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Anm_SetPick;                                       // 0x0438(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anm_Fail;                                          // 0x0440(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anm_In;                                            // 0x0448(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anm_Success;                                       // 0x0450(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anm_KeyShake;                                      // 0x0458(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBP_PalRichTextBlock_C*                 BP_PalRichTextBlock_C_137;                         // 0x0460(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Canvas_Key;                                        // 0x0468(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Canvas_KeyHole;                                    // 0x0470(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Canvas_PickingTool;                                // 0x0478(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Canvas_ResultText_Fail;                            // 0x0480(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Canvas_ResultText_Success;                         // 0x0488(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Eff_RoundBlur;                               // 0x0490(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Eff_Square_0;                                // 0x0498(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Eff_Square_1;                                // 0x04A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Frame_Shadow;                                // 0x04A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Key;                                         // 0x04B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_KeyHole;                                     // 0x04B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_LockBase;                                    // 0x04C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_PickingTool;                                 // 0x04C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_PalTextBlock_C*                     Text_Break;                                        // 0x04D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBP_PalTextBlock_C*                     Text_Success;                                      // 0x04D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_PalKeyGuideIcon_C*                 WBP_PalKeyGuideIcon_Cancel;                        // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_PalKeyGuideIcon_C*                 WBP_PalKeyGuideIcon_TurnKey;                       // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_PalKeyGuideIcon_C*                 WBP_PalKeyGuideIcon_TurnPick;                      // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UPalPickingGameProcessor> GameProcessor;                                     // 0x04F8(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsTurningKey;                                      // 0x0528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLeftInput;                                       // 0x0529(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRightInput;                                      // 0x052A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStoppedKey;                                      // 0x052B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastKeyPosition;                                   // 0x052C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            KeyTurnSpeedCurve;                                 // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        KeyTurnTime;                                       // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ToolMoveSpeedPerSecond;                            // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           RestartTimer;                                      // 0x0548(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ClearGameCloseTimer;                               // 0x0550(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsClear;                                           // 0x0558(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F6B[0x7];                                     // 0x0559(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AnalogValue;                                       // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackComponent*                KeyTurnStopForceFeedback;                          // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMap<EPalPickingGameDifficultyType, TSoftObjectPtr<class UTexture2D>> KeyHoleTextureMap;                                 // 0x0570(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         CachedFinalAKETriggerToolPosition;                 // 0x05C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F6C[0x4];                                     // 0x05C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           BlockAKETriggerTImer;                              // 0x05C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsBlockPickAKE;                                   // 0x05D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFailed;                                          // 0x05D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CalcKeyTurnSpeed(double DeltaTime, double* Speed);
	void CalcToolPosition_ForMouse();
	void CalcToolTurnSpeed(double DeltaTime, double* Speed);
	void Construct();
	void Destruct();
	void ExecuteUbergraph_WBP_PickingGame_ForDisplay(int32 EntryPoint);
	struct FEventReply OnAnalogValueChanged(const struct FGeometry& MyGeometry, const struct FAnalogInputEvent& InAnalogInputEvent);
	void OnChangedInputMethod(ECommonInputType bNewInputType);
	void OnFailGame();
	void OnFocusLost(const struct FFocusEvent& InFocusEvent);
	struct FEventReply OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	struct FEventReply OnKeyUp(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	void OnRemovedFromFocusPath(const struct FFocusEvent& InFocusEvent);
	void OnSetup();
	void OnStartGame(const struct FPalPickingGameSettingData& NewSettingData);
	void OnStopTurningKey();
	void OnSuccessGame();
	void OnTimer_ClearGame();
	void OnTimer_Restart();
	void OnUpdateKeyPosition(float KeyPositon);
	void OnUpdatePickingToolPosition(float ToolPosition);
	void PlayPickSound();
	void SequenceEvent();
	void SequenceEvent_0();
	void SequenceEvent_1();
	void SequenceEvent_2();
	void SequenceEvent__ENTRYPOINTWBP_PickingGame_ForDisplay();
	void SequenceEvent__ENTRYPOINTWBP_PickingGame_ForDisplay_0();
	void SequenceEvent__ENTRYPOINTWBP_PickingGame_ForDisplay_1();
	void SequenceEvent__ENTRYPOINTWBP_PickingGame_ForDisplay_2();
	void SetupEvent();
	void StartForceFeedback();
	void StartTurnKey();
	void StartTurnPick_L();
	void StartTurnPick_R();
	void StopForceFeedback();
	void StopTurnKey();
	void StopTurnPick_L();
	void StopTurnPick_R();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UnbindEvent();
	void UpdateKeyHoleTexture();
	void ________();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_PickingGame_ForDisplay_C">();
	}
	static class UWBP_PickingGame_ForDisplay_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_PickingGame_ForDisplay_C>();
	}
};
static_assert(alignof(UWBP_PickingGame_ForDisplay_C) == 0x000008, "Wrong alignment on UWBP_PickingGame_ForDisplay_C");
static_assert(sizeof(UWBP_PickingGame_ForDisplay_C) == 0x0005D8, "Wrong size on UWBP_PickingGame_ForDisplay_C");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, UberGraphFrame) == 0x000430, "Member 'UWBP_PickingGame_ForDisplay_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, Anm_SetPick) == 0x000438, "Member 'UWBP_PickingGame_ForDisplay_C::Anm_SetPick' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, Anm_Fail) == 0x000440, "Member 'UWBP_PickingGame_ForDisplay_C::Anm_Fail' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, Anm_In) == 0x000448, "Member 'UWBP_PickingGame_ForDisplay_C::Anm_In' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, Anm_Success) == 0x000450, "Member 'UWBP_PickingGame_ForDisplay_C::Anm_Success' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, Anm_KeyShake) == 0x000458, "Member 'UWBP_PickingGame_ForDisplay_C::Anm_KeyShake' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, BP_PalRichTextBlock_C_137) == 0x000460, "Member 'UWBP_PickingGame_ForDisplay_C::BP_PalRichTextBlock_C_137' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, Canvas_Key) == 0x000468, "Member 'UWBP_PickingGame_ForDisplay_C::Canvas_Key' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, Canvas_KeyHole) == 0x000470, "Member 'UWBP_PickingGame_ForDisplay_C::Canvas_KeyHole' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, Canvas_PickingTool) == 0x000478, "Member 'UWBP_PickingGame_ForDisplay_C::Canvas_PickingTool' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, Canvas_ResultText_Fail) == 0x000480, "Member 'UWBP_PickingGame_ForDisplay_C::Canvas_ResultText_Fail' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, Canvas_ResultText_Success) == 0x000488, "Member 'UWBP_PickingGame_ForDisplay_C::Canvas_ResultText_Success' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, Image_Eff_RoundBlur) == 0x000490, "Member 'UWBP_PickingGame_ForDisplay_C::Image_Eff_RoundBlur' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, Image_Eff_Square_0) == 0x000498, "Member 'UWBP_PickingGame_ForDisplay_C::Image_Eff_Square_0' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, Image_Eff_Square_1) == 0x0004A0, "Member 'UWBP_PickingGame_ForDisplay_C::Image_Eff_Square_1' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, Image_Frame_Shadow) == 0x0004A8, "Member 'UWBP_PickingGame_ForDisplay_C::Image_Frame_Shadow' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, Image_Key) == 0x0004B0, "Member 'UWBP_PickingGame_ForDisplay_C::Image_Key' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, Image_KeyHole) == 0x0004B8, "Member 'UWBP_PickingGame_ForDisplay_C::Image_KeyHole' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, Image_LockBase) == 0x0004C0, "Member 'UWBP_PickingGame_ForDisplay_C::Image_LockBase' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, Image_PickingTool) == 0x0004C8, "Member 'UWBP_PickingGame_ForDisplay_C::Image_PickingTool' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, Text_Break) == 0x0004D0, "Member 'UWBP_PickingGame_ForDisplay_C::Text_Break' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, Text_Success) == 0x0004D8, "Member 'UWBP_PickingGame_ForDisplay_C::Text_Success' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, WBP_PalKeyGuideIcon_Cancel) == 0x0004E0, "Member 'UWBP_PickingGame_ForDisplay_C::WBP_PalKeyGuideIcon_Cancel' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, WBP_PalKeyGuideIcon_TurnKey) == 0x0004E8, "Member 'UWBP_PickingGame_ForDisplay_C::WBP_PalKeyGuideIcon_TurnKey' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, WBP_PalKeyGuideIcon_TurnPick) == 0x0004F0, "Member 'UWBP_PickingGame_ForDisplay_C::WBP_PalKeyGuideIcon_TurnPick' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, GameProcessor) == 0x0004F8, "Member 'UWBP_PickingGame_ForDisplay_C::GameProcessor' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, IsTurningKey) == 0x000528, "Member 'UWBP_PickingGame_ForDisplay_C::IsTurningKey' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, IsLeftInput) == 0x000529, "Member 'UWBP_PickingGame_ForDisplay_C::IsLeftInput' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, IsRightInput) == 0x00052A, "Member 'UWBP_PickingGame_ForDisplay_C::IsRightInput' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, IsStoppedKey) == 0x00052B, "Member 'UWBP_PickingGame_ForDisplay_C::IsStoppedKey' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, LastKeyPosition) == 0x00052C, "Member 'UWBP_PickingGame_ForDisplay_C::LastKeyPosition' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, KeyTurnSpeedCurve) == 0x000530, "Member 'UWBP_PickingGame_ForDisplay_C::KeyTurnSpeedCurve' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, KeyTurnTime) == 0x000538, "Member 'UWBP_PickingGame_ForDisplay_C::KeyTurnTime' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, ToolMoveSpeedPerSecond) == 0x000540, "Member 'UWBP_PickingGame_ForDisplay_C::ToolMoveSpeedPerSecond' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, RestartTimer) == 0x000548, "Member 'UWBP_PickingGame_ForDisplay_C::RestartTimer' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, ClearGameCloseTimer) == 0x000550, "Member 'UWBP_PickingGame_ForDisplay_C::ClearGameCloseTimer' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, IsClear) == 0x000558, "Member 'UWBP_PickingGame_ForDisplay_C::IsClear' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, AnalogValue) == 0x000560, "Member 'UWBP_PickingGame_ForDisplay_C::AnalogValue' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, KeyTurnStopForceFeedback) == 0x000568, "Member 'UWBP_PickingGame_ForDisplay_C::KeyTurnStopForceFeedback' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, KeyHoleTextureMap) == 0x000570, "Member 'UWBP_PickingGame_ForDisplay_C::KeyHoleTextureMap' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, CachedFinalAKETriggerToolPosition) == 0x0005C0, "Member 'UWBP_PickingGame_ForDisplay_C::CachedFinalAKETriggerToolPosition' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, BlockAKETriggerTImer) == 0x0005C8, "Member 'UWBP_PickingGame_ForDisplay_C::BlockAKETriggerTImer' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, bIsBlockPickAKE) == 0x0005D0, "Member 'UWBP_PickingGame_ForDisplay_C::bIsBlockPickAKE' has a wrong offset!");
static_assert(offsetof(UWBP_PickingGame_ForDisplay_C, IsFailed) == 0x0005D1, "Member 'UWBP_PickingGame_ForDisplay_C::IsFailed' has a wrong offset!");

}

