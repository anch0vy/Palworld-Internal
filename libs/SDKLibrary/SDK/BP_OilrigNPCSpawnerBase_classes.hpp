#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_OilrigNPCSpawnerBase

#include "Basic.hpp"

#include "Pal_structs.hpp"
#include "Pal_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_OilrigNPCSpawnerBase.BP_OilrigNPCSpawnerBase_C
// 0x0058 (0x0318 - 0x02C0)
class ABP_OilrigNPCSpawnerBase_C : public APalOilrigNPCSpawnerBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Debug_Mesh;                                        // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 DefaultAction;                                     // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FPalDataTableRowName_PalHumanData      HumanName;                                         // 0x02E0(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	int32                                         Level;                                             // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4985[0x4];                                     // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalIndividualCharacterHandle*          SpawnedNPCHandle;                                  // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FPalDataTableRowName_PalMonsterData    OtomoName;                                         // 0x02F8(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           RecheckTimerHandle;                                // 0x0300(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class APalCharacter*                          SpawnedOtomo;                                      // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          StartCombatByOilrigAlert;                          // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Despawn(class UPalIndividualCharacterHandle* Handle);
	void Despawn_Delegate(const struct FPalInstanceID& ID);
	void ExecuteUbergraph_BP_OilrigNPCSpawnerBase(int32 EntryPoint);
	void ExistSpawnableCollision(bool* Exist);
	void InitializeSpawnedCharacter(class UPalIndividualCharacterHandle* Handle);
	void IsNearAnyPlayer(double Distance, bool* IsNear);
	void On_Spawn_Otomo(class AController* HolderController, class APalCharacter* OtomoPal);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void RequestSpawn();
	void Spawn(class FName CharacterID, int32 Param_Level, const struct FVector& Location, const struct FRotator& Rotation, class UPalIndividualCharacterHandle** Handle);
	void Spawn_Delegate(const struct FPalInstanceID& ID);
	void SpawnOneNPC();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_OilrigNPCSpawnerBase_C">();
	}
	static class ABP_OilrigNPCSpawnerBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_OilrigNPCSpawnerBase_C>();
	}
};
static_assert(alignof(ABP_OilrigNPCSpawnerBase_C) == 0x000008, "Wrong alignment on ABP_OilrigNPCSpawnerBase_C");
static_assert(sizeof(ABP_OilrigNPCSpawnerBase_C) == 0x000318, "Wrong size on ABP_OilrigNPCSpawnerBase_C");
static_assert(offsetof(ABP_OilrigNPCSpawnerBase_C, UberGraphFrame) == 0x0002C0, "Member 'ABP_OilrigNPCSpawnerBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_OilrigNPCSpawnerBase_C, Debug_Mesh) == 0x0002C8, "Member 'ABP_OilrigNPCSpawnerBase_C::Debug_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_OilrigNPCSpawnerBase_C, DefaultSceneRoot) == 0x0002D0, "Member 'ABP_OilrigNPCSpawnerBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_OilrigNPCSpawnerBase_C, DefaultAction) == 0x0002D8, "Member 'ABP_OilrigNPCSpawnerBase_C::DefaultAction' has a wrong offset!");
static_assert(offsetof(ABP_OilrigNPCSpawnerBase_C, HumanName) == 0x0002E0, "Member 'ABP_OilrigNPCSpawnerBase_C::HumanName' has a wrong offset!");
static_assert(offsetof(ABP_OilrigNPCSpawnerBase_C, Level) == 0x0002E8, "Member 'ABP_OilrigNPCSpawnerBase_C::Level' has a wrong offset!");
static_assert(offsetof(ABP_OilrigNPCSpawnerBase_C, SpawnedNPCHandle) == 0x0002F0, "Member 'ABP_OilrigNPCSpawnerBase_C::SpawnedNPCHandle' has a wrong offset!");
static_assert(offsetof(ABP_OilrigNPCSpawnerBase_C, OtomoName) == 0x0002F8, "Member 'ABP_OilrigNPCSpawnerBase_C::OtomoName' has a wrong offset!");
static_assert(offsetof(ABP_OilrigNPCSpawnerBase_C, RecheckTimerHandle) == 0x000300, "Member 'ABP_OilrigNPCSpawnerBase_C::RecheckTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_OilrigNPCSpawnerBase_C, SpawnedOtomo) == 0x000308, "Member 'ABP_OilrigNPCSpawnerBase_C::SpawnedOtomo' has a wrong offset!");
static_assert(offsetof(ABP_OilrigNPCSpawnerBase_C, StartCombatByOilrigAlert) == 0x000310, "Member 'ABP_OilrigNPCSpawnerBase_C::StartCombatByOilrigAlert' has a wrong offset!");

}

