#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_AssignBoard_PalSlot

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Pal_structs.hpp"


namespace SDK::Params
{

// Function WBP_AssignBoard_PalSlot.WBP_AssignBoard_PalSlot_C.ExecuteUbergraph_WBP_AssignBoard_PalSlot
// 0x0044 (0x0044 - 0x0000)
struct WBP_AssignBoard_PalSlot_C_ExecuteUbergraph_WBP_AssignBoard_PalSlot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FGuid& WorkId, bool IsFixedAssign)> K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(int64 NowHP, int64 NowMaxHP)>  K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x0034(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AssignBoard_PalSlot_C_ExecuteUbergraph_WBP_AssignBoard_PalSlot) == 0x000004, "Wrong alignment on WBP_AssignBoard_PalSlot_C_ExecuteUbergraph_WBP_AssignBoard_PalSlot");
static_assert(sizeof(WBP_AssignBoard_PalSlot_C_ExecuteUbergraph_WBP_AssignBoard_PalSlot) == 0x000044, "Wrong size on WBP_AssignBoard_PalSlot_C_ExecuteUbergraph_WBP_AssignBoard_PalSlot");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_ExecuteUbergraph_WBP_AssignBoard_PalSlot, EntryPoint) == 0x000000, "Member 'WBP_AssignBoard_PalSlot_C_ExecuteUbergraph_WBP_AssignBoard_PalSlot::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_ExecuteUbergraph_WBP_AssignBoard_PalSlot, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'WBP_AssignBoard_PalSlot_C_ExecuteUbergraph_WBP_AssignBoard_PalSlot::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_ExecuteUbergraph_WBP_AssignBoard_PalSlot, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'WBP_AssignBoard_PalSlot_C_ExecuteUbergraph_WBP_AssignBoard_PalSlot::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_ExecuteUbergraph_WBP_AssignBoard_PalSlot, K2Node_CreateDelegate_OutputDelegate_2) == 0x000024, "Member 'WBP_AssignBoard_PalSlot_C_ExecuteUbergraph_WBP_AssignBoard_PalSlot::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_ExecuteUbergraph_WBP_AssignBoard_PalSlot, K2Node_CreateDelegate_OutputDelegate_3) == 0x000034, "Member 'WBP_AssignBoard_PalSlot_C_ExecuteUbergraph_WBP_AssignBoard_PalSlot::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");

// Function WBP_AssignBoard_PalSlot.WBP_AssignBoard_PalSlot_C.OnSetValidSlot_Binded
// 0x0028 (0x0028 - 0x0000)
struct WBP_AssignBoard_PalSlot_C_OnSetValidSlot_Binded final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C75[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalIndividualCharacterHandle*          CallFunc_GetHandle_ReturnValue;                    // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C76[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalIndividualCharacterParameter*       CallFunc_TryGetIndividualParameter_ReturnValue;    // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPalGenderType                                CallFunc_GetGenderType_ReturnValue;                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AssignBoard_PalSlot_C_OnSetValidSlot_Binded) == 0x000008, "Wrong alignment on WBP_AssignBoard_PalSlot_C_OnSetValidSlot_Binded");
static_assert(sizeof(WBP_AssignBoard_PalSlot_C_OnSetValidSlot_Binded) == 0x000028, "Wrong size on WBP_AssignBoard_PalSlot_C_OnSetValidSlot_Binded");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_OnSetValidSlot_Binded, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'WBP_AssignBoard_PalSlot_C_OnSetValidSlot_Binded::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_OnSetValidSlot_Binded, CallFunc_GetHandle_ReturnValue) == 0x000008, "Member 'WBP_AssignBoard_PalSlot_C_OnSetValidSlot_Binded::CallFunc_GetHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_OnSetValidSlot_Binded, CallFunc_IsValid_ReturnValue_1) == 0x000010, "Member 'WBP_AssignBoard_PalSlot_C_OnSetValidSlot_Binded::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_OnSetValidSlot_Binded, CallFunc_TryGetIndividualParameter_ReturnValue) == 0x000018, "Member 'WBP_AssignBoard_PalSlot_C_OnSetValidSlot_Binded::CallFunc_TryGetIndividualParameter_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_OnSetValidSlot_Binded, CallFunc_IsValid_ReturnValue_2) == 0x000020, "Member 'WBP_AssignBoard_PalSlot_C_OnSetValidSlot_Binded::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_OnSetValidSlot_Binded, CallFunc_GetGenderType_ReturnValue) == 0x000021, "Member 'WBP_AssignBoard_PalSlot_C_OnSetValidSlot_Binded::CallFunc_GetGenderType_ReturnValue' has a wrong offset!");

// Function WBP_AssignBoard_PalSlot.WBP_AssignBoard_PalSlot_C.OnUpdateHP_Binded
// 0x0018 (0x0018 - 0x0000)
struct WBP_AssignBoard_PalSlot_C_OnUpdateHP_Binded final
{
public:
	int64                                         NowHP;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         NowMaxHP;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_Int64Int64_ReturnValue;        // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AssignBoard_PalSlot_C_OnUpdateHP_Binded) == 0x000008, "Wrong alignment on WBP_AssignBoard_PalSlot_C_OnUpdateHP_Binded");
static_assert(sizeof(WBP_AssignBoard_PalSlot_C_OnUpdateHP_Binded) == 0x000018, "Wrong size on WBP_AssignBoard_PalSlot_C_OnUpdateHP_Binded");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_OnUpdateHP_Binded, NowHP) == 0x000000, "Member 'WBP_AssignBoard_PalSlot_C_OnUpdateHP_Binded::NowHP' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_OnUpdateHP_Binded, NowMaxHP) == 0x000008, "Member 'WBP_AssignBoard_PalSlot_C_OnUpdateHP_Binded::NowMaxHP' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_OnUpdateHP_Binded, Temp_bool_Variable) == 0x000010, "Member 'WBP_AssignBoard_PalSlot_C_OnUpdateHP_Binded::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_OnUpdateHP_Binded, CallFunc_EqualEqual_Int64Int64_ReturnValue) == 0x000011, "Member 'WBP_AssignBoard_PalSlot_C_OnUpdateHP_Binded::CallFunc_EqualEqual_Int64Int64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_OnUpdateHP_Binded, Temp_byte_Variable) == 0x000012, "Member 'WBP_AssignBoard_PalSlot_C_OnUpdateHP_Binded::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_OnUpdateHP_Binded, Temp_byte_Variable_1) == 0x000013, "Member 'WBP_AssignBoard_PalSlot_C_OnUpdateHP_Binded::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_OnUpdateHP_Binded, K2Node_Select_Default) == 0x000014, "Member 'WBP_AssignBoard_PalSlot_C_OnUpdateHP_Binded::K2Node_Select_Default' has a wrong offset!");

// Function WBP_AssignBoard_PalSlot.WBP_AssignBoard_PalSlot_C.OnUpdateWorkId_Binded
// 0x001C (0x001C - 0x0000)
struct WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded final
{
public:
	struct FGuid                                  WorkId;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFixedAssign;                                     // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_Guid_ReturnValue;                 // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_GuidGuid_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded) == 0x000004, "Wrong alignment on WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded");
static_assert(sizeof(WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded) == 0x00001C, "Wrong size on WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded, WorkId) == 0x000000, "Member 'WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded::WorkId' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded, IsFixedAssign) == 0x000010, "Member 'WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded::IsFixedAssign' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded, Temp_bool_Variable) == 0x000011, "Member 'WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded, CallFunc_IsValid_Guid_ReturnValue) == 0x000012, "Member 'WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded::CallFunc_IsValid_Guid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded, Temp_byte_Variable) == 0x000013, "Member 'WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded, Temp_byte_Variable_1) == 0x000014, "Member 'WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded, Temp_bool_Variable_1) == 0x000015, "Member 'WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded, Temp_byte_Variable_2) == 0x000016, "Member 'WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded, Temp_byte_Variable_3) == 0x000017, "Member 'WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded, CallFunc_EqualEqual_GuidGuid_ReturnValue) == 0x000018, "Member 'WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded::CallFunc_EqualEqual_GuidGuid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded, CallFunc_BooleanAND_ReturnValue) == 0x000019, "Member 'WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded, K2Node_Select_Default) == 0x00001A, "Member 'WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded, K2Node_Select_Default_1) == 0x00001B, "Member 'WBP_AssignBoard_PalSlot_C_OnUpdateWorkId_Binded::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_AssignBoard_PalSlot.WBP_AssignBoard_PalSlot_C.RegisterCharacterIconWidget
// 0x0008 (0x0008 - 0x0000)
struct WBP_AssignBoard_PalSlot_C_RegisterCharacterIconWidget final
{
public:
	class UWBP_PalCharacterIconBase_C*            IconWidget;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AssignBoard_PalSlot_C_RegisterCharacterIconWidget) == 0x000008, "Wrong alignment on WBP_AssignBoard_PalSlot_C_RegisterCharacterIconWidget");
static_assert(sizeof(WBP_AssignBoard_PalSlot_C_RegisterCharacterIconWidget) == 0x000008, "Wrong size on WBP_AssignBoard_PalSlot_C_RegisterCharacterIconWidget");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_RegisterCharacterIconWidget, IconWidget) == 0x000000, "Member 'WBP_AssignBoard_PalSlot_C_RegisterCharacterIconWidget::IconWidget' has a wrong offset!");

// Function WBP_AssignBoard_PalSlot.WBP_AssignBoard_PalSlot_C.SetReferenceWorkId
// 0x0050 (0x0050 - 0x0000)
struct WBP_AssignBoard_PalSlot_C_SetReferenceWorkId final
{
public:
	struct FGuid                                  WorkId;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPalIndividualCharacterHandle*          CallFunc_GetIndividualHandle_Handle;               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C77[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APalCharacter*                          CallFunc_TryGetIndividualActor_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C78[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalCharacterParameterComponent*        CallFunc_GetCharacterParameterComponent_ReturnValue; // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAssignedFixed_ReturnValue;              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C79[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  CallFunc_GetWorkId_ReturnValue;                    // 0x003C(0x0010)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AssignBoard_PalSlot_C_SetReferenceWorkId) == 0x000008, "Wrong alignment on WBP_AssignBoard_PalSlot_C_SetReferenceWorkId");
static_assert(sizeof(WBP_AssignBoard_PalSlot_C_SetReferenceWorkId) == 0x000050, "Wrong size on WBP_AssignBoard_PalSlot_C_SetReferenceWorkId");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_SetReferenceWorkId, WorkId) == 0x000000, "Member 'WBP_AssignBoard_PalSlot_C_SetReferenceWorkId::WorkId' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_SetReferenceWorkId, CallFunc_GetIndividualHandle_Handle) == 0x000010, "Member 'WBP_AssignBoard_PalSlot_C_SetReferenceWorkId::CallFunc_GetIndividualHandle_Handle' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_SetReferenceWorkId, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'WBP_AssignBoard_PalSlot_C_SetReferenceWorkId::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_SetReferenceWorkId, CallFunc_TryGetIndividualActor_ReturnValue) == 0x000020, "Member 'WBP_AssignBoard_PalSlot_C_SetReferenceWorkId::CallFunc_TryGetIndividualActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_SetReferenceWorkId, CallFunc_IsValid_ReturnValue_1) == 0x000028, "Member 'WBP_AssignBoard_PalSlot_C_SetReferenceWorkId::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_SetReferenceWorkId, CallFunc_GetCharacterParameterComponent_ReturnValue) == 0x000030, "Member 'WBP_AssignBoard_PalSlot_C_SetReferenceWorkId::CallFunc_GetCharacterParameterComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_SetReferenceWorkId, CallFunc_IsAssignedFixed_ReturnValue) == 0x000038, "Member 'WBP_AssignBoard_PalSlot_C_SetReferenceWorkId::CallFunc_IsAssignedFixed_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_SetReferenceWorkId, CallFunc_GetWorkId_ReturnValue) == 0x00003C, "Member 'WBP_AssignBoard_PalSlot_C_SetReferenceWorkId::CallFunc_GetWorkId_ReturnValue' has a wrong offset!");

// Function WBP_AssignBoard_PalSlot.WBP_AssignBoard_PalSlot_C.SetVisibilityCheck
// 0x0001 (0x0001 - 0x0000)
struct WBP_AssignBoard_PalSlot_C_SetVisibilityCheck final
{
public:
	ESlateVisibility                              NewVisibility;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AssignBoard_PalSlot_C_SetVisibilityCheck) == 0x000001, "Wrong alignment on WBP_AssignBoard_PalSlot_C_SetVisibilityCheck");
static_assert(sizeof(WBP_AssignBoard_PalSlot_C_SetVisibilityCheck) == 0x000001, "Wrong size on WBP_AssignBoard_PalSlot_C_SetVisibilityCheck");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_SetVisibilityCheck, NewVisibility) == 0x000000, "Member 'WBP_AssignBoard_PalSlot_C_SetVisibilityCheck::NewVisibility' has a wrong offset!");

// Function WBP_AssignBoard_PalSlot.WBP_AssignBoard_PalSlot_C.SetVisibilityFixedAssignFrame
// 0x0001 (0x0001 - 0x0000)
struct WBP_AssignBoard_PalSlot_C_SetVisibilityFixedAssignFrame final
{
public:
	ESlateVisibility                              NewVisibility;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AssignBoard_PalSlot_C_SetVisibilityFixedAssignFrame) == 0x000001, "Wrong alignment on WBP_AssignBoard_PalSlot_C_SetVisibilityFixedAssignFrame");
static_assert(sizeof(WBP_AssignBoard_PalSlot_C_SetVisibilityFixedAssignFrame) == 0x000001, "Wrong size on WBP_AssignBoard_PalSlot_C_SetVisibilityFixedAssignFrame");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_SetVisibilityFixedAssignFrame, NewVisibility) == 0x000000, "Member 'WBP_AssignBoard_PalSlot_C_SetVisibilityFixedAssignFrame::NewVisibility' has a wrong offset!");

// Function WBP_AssignBoard_PalSlot.WBP_AssignBoard_PalSlot_C.SetVisibilityFocusFrame
// 0x0001 (0x0001 - 0x0000)
struct WBP_AssignBoard_PalSlot_C_SetVisibilityFocusFrame final
{
public:
	ESlateVisibility                              NewVisibility;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AssignBoard_PalSlot_C_SetVisibilityFocusFrame) == 0x000001, "Wrong alignment on WBP_AssignBoard_PalSlot_C_SetVisibilityFocusFrame");
static_assert(sizeof(WBP_AssignBoard_PalSlot_C_SetVisibilityFocusFrame) == 0x000001, "Wrong size on WBP_AssignBoard_PalSlot_C_SetVisibilityFocusFrame");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_SetVisibilityFocusFrame, NewVisibility) == 0x000000, "Member 'WBP_AssignBoard_PalSlot_C_SetVisibilityFocusFrame::NewVisibility' has a wrong offset!");

// Function WBP_AssignBoard_PalSlot.WBP_AssignBoard_PalSlot_C.SetVisibilityGenderIcon
// 0x0001 (0x0001 - 0x0000)
struct WBP_AssignBoard_PalSlot_C_SetVisibilityGenderIcon final
{
public:
	ESlateVisibility                              NewVisibility;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_AssignBoard_PalSlot_C_SetVisibilityGenderIcon) == 0x000001, "Wrong alignment on WBP_AssignBoard_PalSlot_C_SetVisibilityGenderIcon");
static_assert(sizeof(WBP_AssignBoard_PalSlot_C_SetVisibilityGenderIcon) == 0x000001, "Wrong size on WBP_AssignBoard_PalSlot_C_SetVisibilityGenderIcon");
static_assert(offsetof(WBP_AssignBoard_PalSlot_C_SetVisibilityGenderIcon, NewVisibility) == 0x000000, "Member 'WBP_AssignBoard_PalSlot_C_SetVisibilityGenderIcon::NewVisibility' has a wrong offset!");

}

