#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_PickingGame_ForDisplay

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CommonInput_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"
#include "Engine_structs.hpp"
#include "Pal_structs.hpp"


namespace SDK::Params
{

// Function WBP_PickingGame_ForDisplay.WBP_PickingGame_ForDisplay_C.CalcKeyTurnSpeed
// 0x0068 (0x0068 - 0x0000)
struct WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Speed;                                             // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCommonInputSubsystem*                  CallFunc_GetLocalPlayerSubsystem_ReturnValue;      // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ECommonInputType                              CallFunc_GetCurrentInputType_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F6D[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F6E[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMin_ReturnValue;                         // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_InTime_ImplicitCast;        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F6F[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1;   // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed) == 0x000008, "Wrong alignment on WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed");
static_assert(sizeof(WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed) == 0x000068, "Wrong size on WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed, DeltaTime) == 0x000000, "Member 'WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed::DeltaTime' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed, Speed) == 0x000008, "Member 'WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed::Speed' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed, CallFunc_GetLocalPlayerSubsystem_ReturnValue) == 0x000010, "Member 'WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed::CallFunc_GetLocalPlayerSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed, CallFunc_GetCurrentInputType_ReturnValue) == 0x000018, "Member 'WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed::CallFunc_GetCurrentInputType_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed, CallFunc_GetFloatValue_ReturnValue) == 0x00001C, "Member 'WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000020, "Member 'WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000028, "Member 'WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000030, "Member 'WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000038, "Member 'WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000040, "Member 'WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed, CallFunc_FMin_ReturnValue) == 0x000048, "Member 'WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed, CallFunc_GetFloatValue_InTime_ImplicitCast) == 0x000050, "Member 'WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed::CallFunc_GetFloatValue_InTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000058, "Member 'WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1) == 0x000060, "Member 'WBP_PickingGame_ForDisplay_C_CalcKeyTurnSpeed::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");

// Function WBP_PickingGame_ForDisplay.WBP_PickingGame_ForDisplay_C.CalcToolPosition_ForMouse
// 0x0138 (0x0138 - 0x0000)
struct WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse final
{
public:
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              CallFunc_GetTickSpaceGeometry_ReturnValue;         // 0x0008(0x0040)(ConstParm, IsPlainOldData, NoDestructor)
	class UPalPickingGameProcessor*               K2Node_DynamicCast_AsPal_Picking_Game_Processor;   // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F70[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetLocalSize_ReturnValue;                 // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue;    // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_LocalToViewport_PixelPosition;            // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_LocalToViewport_ViewportPosition;         // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_1; // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPalPickingGameProcessor*               K2Node_DynamicCast_AsPal_Picking_Game_Processor_1; // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F71[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_2; // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetMousePositionOnViewport_ReturnValue;   // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPalPickingGameProcessor*               K2Node_DynamicCast_AsPal_Picking_Game_Processor_2; // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_Vector2DVector2D_ReturnValue;  // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F72[0x6];                                     // 0x00D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DegAtan2_ReturnValue;                     // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F73[0x7];                                     // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F74[0x3];                                     // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetPickingToolPosition_NewPosition_ImplicitCast; // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetPickingToolPosition_NewPosition_ImplicitCast_1; // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse) == 0x000008, "Wrong alignment on WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse");
static_assert(sizeof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse) == 0x000138, "Wrong size on WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000000, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse, CallFunc_GetTickSpaceGeometry_ReturnValue) == 0x000008, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse::CallFunc_GetTickSpaceGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse, K2Node_DynamicCast_AsPal_Picking_Game_Processor) == 0x000048, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse::K2Node_DynamicCast_AsPal_Picking_Game_Processor' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse, CallFunc_GetLocalSize_ReturnValue) == 0x000058, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse::CallFunc_GetLocalSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse, CallFunc_Multiply_Vector2DVector2D_ReturnValue) == 0x000068, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse::CallFunc_Multiply_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse, CallFunc_LocalToViewport_PixelPosition) == 0x000078, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse::CallFunc_LocalToViewport_PixelPosition' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse, CallFunc_LocalToViewport_ViewportPosition) == 0x000088, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse::CallFunc_LocalToViewport_ViewportPosition' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_1) == 0x000098, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse, K2Node_DynamicCast_AsPal_Picking_Game_Processor_1) == 0x0000A0, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse::K2Node_DynamicCast_AsPal_Picking_Game_Processor_1' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse, K2Node_DynamicCast_bSuccess_1) == 0x0000A8, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_2) == 0x0000B0, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse, CallFunc_GetMousePositionOnViewport_ReturnValue) == 0x0000B8, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse::CallFunc_GetMousePositionOnViewport_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse, K2Node_DynamicCast_AsPal_Picking_Game_Processor_2) == 0x0000C8, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse::K2Node_DynamicCast_AsPal_Picking_Game_Processor_2' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse, K2Node_DynamicCast_bSuccess_2) == 0x0000D0, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse, CallFunc_EqualEqual_Vector2DVector2D_ReturnValue) == 0x0000D1, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse::CallFunc_EqualEqual_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x0000D8, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse, CallFunc_BreakVector2D_X) == 0x0000E8, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse, CallFunc_BreakVector2D_Y) == 0x0000F0, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse, CallFunc_DegAtan2_ReturnValue) == 0x0000F8, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse::CallFunc_DegAtan2_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse, CallFunc_Abs_ReturnValue) == 0x000100, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000108, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000110, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse, CallFunc_SelectFloat_ReturnValue) == 0x000118, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000120, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000128, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse, CallFunc_SetPickingToolPosition_NewPosition_ImplicitCast) == 0x00012C, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse::CallFunc_SetPickingToolPosition_NewPosition_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse, CallFunc_SetPickingToolPosition_NewPosition_ImplicitCast_1) == 0x000130, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolPosition_ForMouse::CallFunc_SetPickingToolPosition_NewPosition_ImplicitCast_1' has a wrong offset!");

// Function WBP_PickingGame_ForDisplay.WBP_PickingGame_ForDisplay_C.CalcToolTurnSpeed
// 0x0018 (0x0018 - 0x0000)
struct WBP_PickingGame_ForDisplay_C_CalcToolTurnSpeed final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Speed;                                             // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PickingGame_ForDisplay_C_CalcToolTurnSpeed) == 0x000008, "Wrong alignment on WBP_PickingGame_ForDisplay_C_CalcToolTurnSpeed");
static_assert(sizeof(WBP_PickingGame_ForDisplay_C_CalcToolTurnSpeed) == 0x000018, "Wrong size on WBP_PickingGame_ForDisplay_C_CalcToolTurnSpeed");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolTurnSpeed, DeltaTime) == 0x000000, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolTurnSpeed::DeltaTime' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolTurnSpeed, Speed) == 0x000008, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolTurnSpeed::Speed' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_CalcToolTurnSpeed, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000010, "Member 'WBP_PickingGame_ForDisplay_C_CalcToolTurnSpeed::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");

// Function WBP_PickingGame_ForDisplay.WBP_PickingGame_ForDisplay_C.ExecuteUbergraph_WBP_PickingGame_ForDisplay
// 0x01E0 (0x01E0 - 0x0000)
struct WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F75[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonInputSubsystem*                  CallFunc_GetLocalPlayerSubsystem_ReturnValue;      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F76[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalHUDService*                         CallFunc_GetHUDService_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPalHUDService*                         CallFunc_GetHUDService_ReturnValue_1;              // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPalHUDService*                         CallFunc_GetHUDService_ReturnValue_2;              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0030(0x0040)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F77[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_CalcToolTurnSpeed_Speed;                  // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_CalcKeyTurnSpeed_Speed;                   // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPalHUDDispatchParameterBase*           CallFunc_GetParam_ReturnValue;                     // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPalHUDService*                         CallFunc_GetHUDService_ReturnValue_3;              // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPalHUDDispatchParame_PickingGame*      K2Node_DynamicCast_AsPal_HUDDispatch_Parame_Picking_Game; // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F78[0x6];                                     // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UPalPickingGameProcessor> CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue; // 0x00B0(0x0030)(UObjectWrapper, HasGetValueTypeHash)
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPalPickingGameProcessor*               K2Node_DynamicCast_AsPal_Picking_Game_Processor;   // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F79[0x3];                                     // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFocusEvent                            K2Node_Event_InFocusEvent_1;                       // 0x00F4(0x0008)(NoDestructor)
	struct FFocusEvent                            K2Node_Event_InFocusEvent;                         // 0x00FC(0x0008)(NoDestructor)
	TDelegate<void(ECommonInputType bNewInputType)> K2Node_CreateDelegate_OutputDelegate;              // 0x0104(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ECommonInputType bNewInputType)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0114(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0124(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F7A[0x4];                                     // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonInputSubsystem*                  CallFunc_GetLocalPlayerSubsystem_ReturnValue_1;    // 0x0138(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_1; // 0x0140(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ECommonInputType                              CallFunc_GetCurrentInputType_ReturnValue;          // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F7B[0x7];                                     // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalPickingGameProcessor*               K2Node_DynamicCast_AsPal_Picking_Game_Processor_1; // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x015A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F7C[0x5];                                     // 0x015B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_2; // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPalPickingGameProcessor*               K2Node_DynamicCast_AsPal_Picking_Game_Processor_2; // 0x0168(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F7D[0x7];                                     // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloat_ReturnValue;                  // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCommonInputSubsystem*                  CallFunc_GetLocalPlayerSubsystem_ReturnValue_2;    // 0x0188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F7E[0x7];                                     // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x01A8(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UPalHUDService*                         CallFunc_GetHUDService_ReturnValue_4;              // 0x01B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPalSoundPlayer*                        CallFunc_GetSoundPlayer_ReturnValue;               // 0x01B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_CalcKeyTurnSpeed_DeltaTime_ImplicitCast;  // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_CalcToolTurnSpeed_DeltaTime_ImplicitCast; // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AddPickingToolPosition_AddPosition_ImplicitCast; // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AddKeyPosition_AddPosition_ImplicitCast;  // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AddPickingToolPosition_AddPosition_ImplicitCast_1; // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast;    // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay) == 0x000008, "Wrong alignment on WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay");
static_assert(sizeof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay) == 0x0001E0, "Wrong size on WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, EntryPoint) == 0x000000, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_GetLocalPlayerSubsystem_ReturnValue) == 0x000008, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_GetLocalPlayerSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_GetHUDService_ReturnValue) == 0x000018, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_GetHUDService_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_GetHUDService_ReturnValue_1) == 0x000020, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_GetHUDService_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_GetHUDService_ReturnValue_2) == 0x000028, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_GetHUDService_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, K2Node_Event_MyGeometry) == 0x000030, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, K2Node_Event_InDeltaTime) == 0x000070, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_CalcToolTurnSpeed_Speed) == 0x000078, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_CalcToolTurnSpeed_Speed' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_CalcKeyTurnSpeed_Speed) == 0x000080, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_CalcKeyTurnSpeed_Speed' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000088, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_GetParam_ReturnValue) == 0x000090, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_GetParam_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_GetHUDService_ReturnValue_3) == 0x000098, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_GetHUDService_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, K2Node_DynamicCast_AsPal_HUDDispatch_Parame_Picking_Game) == 0x0000A0, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::K2Node_DynamicCast_AsPal_HUDDispatch_Parame_Picking_Game' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, K2Node_DynamicCast_bSuccess) == 0x0000A8, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_IsValid_ReturnValue_1) == 0x0000A9, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue) == 0x0000B0, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x0000E0, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, K2Node_DynamicCast_AsPal_Picking_Game_Processor) == 0x0000E8, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::K2Node_DynamicCast_AsPal_Picking_Game_Processor' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, K2Node_DynamicCast_bSuccess_1) == 0x0000F0, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, K2Node_Event_InFocusEvent_1) == 0x0000F4, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::K2Node_Event_InFocusEvent_1' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, K2Node_Event_InFocusEvent) == 0x0000FC, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::K2Node_Event_InFocusEvent' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, K2Node_CreateDelegate_OutputDelegate) == 0x000104, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, K2Node_CreateDelegate_OutputDelegate_1) == 0x000114, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, K2Node_CreateDelegate_OutputDelegate_2) == 0x000124, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_GetLocalPlayerSubsystem_ReturnValue_1) == 0x000138, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_GetLocalPlayerSubsystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_1) == 0x000140, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_GetCurrentInputType_ReturnValue) == 0x000148, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_GetCurrentInputType_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, K2Node_DynamicCast_AsPal_Picking_Game_Processor_1) == 0x000150, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::K2Node_DynamicCast_AsPal_Picking_Game_Processor_1' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, K2Node_DynamicCast_bSuccess_2) == 0x000158, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000159, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_IsValid_ReturnValue_2) == 0x00015A, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_2) == 0x000160, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, K2Node_DynamicCast_AsPal_Picking_Game_Processor_2) == 0x000168, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::K2Node_DynamicCast_AsPal_Picking_Game_Processor_2' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, K2Node_DynamicCast_bSuccess_3) == 0x000170, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_PlayAnimation_ReturnValue) == 0x000178, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_RandomFloat_ReturnValue) == 0x000180, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_RandomFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_GetLocalPlayerSubsystem_ReturnValue_2) == 0x000188, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_GetLocalPlayerSubsystem_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000190, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000198, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_IsValid_ReturnValue_3) == 0x0001A0, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x0001A8, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_GetHUDService_ReturnValue_4) == 0x0001B0, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_GetHUDService_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_GetSoundPlayer_ReturnValue) == 0x0001B8, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_GetSoundPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_CalcKeyTurnSpeed_DeltaTime_ImplicitCast) == 0x0001C0, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_CalcKeyTurnSpeed_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_CalcToolTurnSpeed_DeltaTime_ImplicitCast) == 0x0001C8, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_CalcToolTurnSpeed_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_AddPickingToolPosition_AddPosition_ImplicitCast) == 0x0001D0, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_AddPickingToolPosition_AddPosition_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_AddKeyPosition_AddPosition_ImplicitCast) == 0x0001D4, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_AddKeyPosition_AddPosition_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_AddPickingToolPosition_AddPosition_ImplicitCast_1) == 0x0001D8, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_AddPickingToolPosition_AddPosition_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast) == 0x0001DC, "Member 'WBP_PickingGame_ForDisplay_C_ExecuteUbergraph_WBP_PickingGame_ForDisplay::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast' has a wrong offset!");

// Function WBP_PickingGame_ForDisplay.WBP_PickingGame_ForDisplay_C.OnAnalogValueChanged
// 0x0348 (0x0348 - 0x0000)
struct WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FAnalogInputEvent                      InAnalogInputEvent;                                // 0x0040(0x0048)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0088(0x00B8)(Parm, OutParm, ReturnParm)
	bool                                          IsNeutral;                                         // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F7F[0x7];                                     // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKeyEvent                              CallFunc_GetKeyEventFromAnalogInputEvent_ReturnValue; // 0x0148(0x0040)()
	float                                         CallFunc_GetAnalogValue_ReturnValue;               // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F80[0x4];                                     // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   CallFunc_GetKey_ReturnValue;                       // 0x0190(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x01AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F81[0x5];                                     // 0x01AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue;                          // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F82[0x7];                                     // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x01C0(0x00B8)()
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0278(0x00B8)()
	double                                        CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast;    // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_A_ImplicitCast;                       // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged) == 0x000008, "Wrong alignment on WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged");
static_assert(sizeof(WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged) == 0x000348, "Wrong size on WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged, MyGeometry) == 0x000000, "Member 'WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged, InAnalogInputEvent) == 0x000040, "Member 'WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged::InAnalogInputEvent' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged, ReturnValue) == 0x000088, "Member 'WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged, IsNeutral) == 0x000140, "Member 'WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged::IsNeutral' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged, CallFunc_GetKeyEventFromAnalogInputEvent_ReturnValue) == 0x000148, "Member 'WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged::CallFunc_GetKeyEventFromAnalogInputEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged, CallFunc_GetAnalogValue_ReturnValue) == 0x000188, "Member 'WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged::CallFunc_GetAnalogValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged, CallFunc_GetKey_ReturnValue) == 0x000190, "Member 'WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged::CallFunc_GetKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0001A8, "Member 'WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x0001A9, "Member 'WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x0001AA, "Member 'WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged, CallFunc_Abs_ReturnValue) == 0x0001B0, "Member 'WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x0001B8, "Member 'WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged, CallFunc_Unhandled_ReturnValue) == 0x0001C0, "Member 'WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged, CallFunc_Handled_ReturnValue) == 0x000278, "Member 'WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged, CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast) == 0x000330, "Member 'WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged::CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged, CallFunc_Abs_A_ImplicitCast) == 0x000338, "Member 'WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged::CallFunc_Abs_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000340, "Member 'WBP_PickingGame_ForDisplay_C_OnAnalogValueChanged::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function WBP_PickingGame_ForDisplay.WBP_PickingGame_ForDisplay_C.OnChangedInputMethod
// 0x0001 (0x0001 - 0x0000)
struct WBP_PickingGame_ForDisplay_C_OnChangedInputMethod final
{
public:
	ECommonInputType                              bNewInputType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PickingGame_ForDisplay_C_OnChangedInputMethod) == 0x000001, "Wrong alignment on WBP_PickingGame_ForDisplay_C_OnChangedInputMethod");
static_assert(sizeof(WBP_PickingGame_ForDisplay_C_OnChangedInputMethod) == 0x000001, "Wrong size on WBP_PickingGame_ForDisplay_C_OnChangedInputMethod");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnChangedInputMethod, bNewInputType) == 0x000000, "Member 'WBP_PickingGame_ForDisplay_C_OnChangedInputMethod::bNewInputType' has a wrong offset!");

// Function WBP_PickingGame_ForDisplay.WBP_PickingGame_ForDisplay_C.OnFailGame
// 0x0030 (0x0030 - 0x0000)
struct WBP_PickingGame_ForDisplay_C_OnFailGame final
{
public:
	class UPalHUDService*                         CallFunc_GetHUDService_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPalSoundPlayer*                        CallFunc_GetSoundPlayer_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PickingGame_ForDisplay_C_OnFailGame) == 0x000008, "Wrong alignment on WBP_PickingGame_ForDisplay_C_OnFailGame");
static_assert(sizeof(WBP_PickingGame_ForDisplay_C_OnFailGame) == 0x000030, "Wrong size on WBP_PickingGame_ForDisplay_C_OnFailGame");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnFailGame, CallFunc_GetHUDService_ReturnValue) == 0x000000, "Member 'WBP_PickingGame_ForDisplay_C_OnFailGame::CallFunc_GetHUDService_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnFailGame, CallFunc_GetSoundPlayer_ReturnValue) == 0x000008, "Member 'WBP_PickingGame_ForDisplay_C_OnFailGame::CallFunc_GetSoundPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnFailGame, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'WBP_PickingGame_ForDisplay_C_OnFailGame::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnFailGame, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'WBP_PickingGame_ForDisplay_C_OnFailGame::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnFailGame, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000028, "Member 'WBP_PickingGame_ForDisplay_C_OnFailGame::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function WBP_PickingGame_ForDisplay.WBP_PickingGame_ForDisplay_C.OnFocusLost
// 0x0008 (0x0008 - 0x0000)
struct WBP_PickingGame_ForDisplay_C_OnFocusLost final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(WBP_PickingGame_ForDisplay_C_OnFocusLost) == 0x000004, "Wrong alignment on WBP_PickingGame_ForDisplay_C_OnFocusLost");
static_assert(sizeof(WBP_PickingGame_ForDisplay_C_OnFocusLost) == 0x000008, "Wrong size on WBP_PickingGame_ForDisplay_C_OnFocusLost");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnFocusLost, InFocusEvent) == 0x000000, "Member 'WBP_PickingGame_ForDisplay_C_OnFocusLost::InFocusEvent' has a wrong offset!");

// Function WBP_PickingGame_ForDisplay.WBP_PickingGame_ForDisplay_C.OnKeyDown
// 0x02C8 (0x02C8 - 0x0000)
struct WBP_PickingGame_ForDisplay_C_OnKeyDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0040(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0080(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0138(0x00B8)()
	struct FKey                                   CallFunc_GetKey_ReturnValue;                       // 0x01F0(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_2;          // 0x020A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F83[0x5];                                     // 0x020B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0210(0x00B8)()
};
static_assert(alignof(WBP_PickingGame_ForDisplay_C_OnKeyDown) == 0x000008, "Wrong alignment on WBP_PickingGame_ForDisplay_C_OnKeyDown");
static_assert(sizeof(WBP_PickingGame_ForDisplay_C_OnKeyDown) == 0x0002C8, "Wrong size on WBP_PickingGame_ForDisplay_C_OnKeyDown");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnKeyDown, MyGeometry) == 0x000000, "Member 'WBP_PickingGame_ForDisplay_C_OnKeyDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnKeyDown, InKeyEvent) == 0x000040, "Member 'WBP_PickingGame_ForDisplay_C_OnKeyDown::InKeyEvent' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnKeyDown, ReturnValue) == 0x000080, "Member 'WBP_PickingGame_ForDisplay_C_OnKeyDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnKeyDown, CallFunc_Unhandled_ReturnValue) == 0x000138, "Member 'WBP_PickingGame_ForDisplay_C_OnKeyDown::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnKeyDown, CallFunc_GetKey_ReturnValue) == 0x0001F0, "Member 'WBP_PickingGame_ForDisplay_C_OnKeyDown::CallFunc_GetKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnKeyDown, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000208, "Member 'WBP_PickingGame_ForDisplay_C_OnKeyDown::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnKeyDown, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x000209, "Member 'WBP_PickingGame_ForDisplay_C_OnKeyDown::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnKeyDown, CallFunc_EqualEqual_KeyKey_ReturnValue_2) == 0x00020A, "Member 'WBP_PickingGame_ForDisplay_C_OnKeyDown::CallFunc_EqualEqual_KeyKey_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnKeyDown, CallFunc_Handled_ReturnValue) == 0x000210, "Member 'WBP_PickingGame_ForDisplay_C_OnKeyDown::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function WBP_PickingGame_ForDisplay.WBP_PickingGame_ForDisplay_C.OnKeyUp
// 0x02C8 (0x02C8 - 0x0000)
struct WBP_PickingGame_ForDisplay_C_OnKeyUp final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0040(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0080(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0138(0x00B8)()
	struct FKey                                   CallFunc_GetKey_ReturnValue;                       // 0x01F0(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_2;          // 0x020A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F84[0x5];                                     // 0x020B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0210(0x00B8)()
};
static_assert(alignof(WBP_PickingGame_ForDisplay_C_OnKeyUp) == 0x000008, "Wrong alignment on WBP_PickingGame_ForDisplay_C_OnKeyUp");
static_assert(sizeof(WBP_PickingGame_ForDisplay_C_OnKeyUp) == 0x0002C8, "Wrong size on WBP_PickingGame_ForDisplay_C_OnKeyUp");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnKeyUp, MyGeometry) == 0x000000, "Member 'WBP_PickingGame_ForDisplay_C_OnKeyUp::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnKeyUp, InKeyEvent) == 0x000040, "Member 'WBP_PickingGame_ForDisplay_C_OnKeyUp::InKeyEvent' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnKeyUp, ReturnValue) == 0x000080, "Member 'WBP_PickingGame_ForDisplay_C_OnKeyUp::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnKeyUp, CallFunc_Unhandled_ReturnValue) == 0x000138, "Member 'WBP_PickingGame_ForDisplay_C_OnKeyUp::CallFunc_Unhandled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnKeyUp, CallFunc_GetKey_ReturnValue) == 0x0001F0, "Member 'WBP_PickingGame_ForDisplay_C_OnKeyUp::CallFunc_GetKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000208, "Member 'WBP_PickingGame_ForDisplay_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x000209, "Member 'WBP_PickingGame_ForDisplay_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue_2) == 0x00020A, "Member 'WBP_PickingGame_ForDisplay_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnKeyUp, CallFunc_Handled_ReturnValue) == 0x000210, "Member 'WBP_PickingGame_ForDisplay_C_OnKeyUp::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function WBP_PickingGame_ForDisplay.WBP_PickingGame_ForDisplay_C.OnRemovedFromFocusPath
// 0x0008 (0x0008 - 0x0000)
struct WBP_PickingGame_ForDisplay_C_OnRemovedFromFocusPath final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(WBP_PickingGame_ForDisplay_C_OnRemovedFromFocusPath) == 0x000004, "Wrong alignment on WBP_PickingGame_ForDisplay_C_OnRemovedFromFocusPath");
static_assert(sizeof(WBP_PickingGame_ForDisplay_C_OnRemovedFromFocusPath) == 0x000008, "Wrong size on WBP_PickingGame_ForDisplay_C_OnRemovedFromFocusPath");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnRemovedFromFocusPath, InFocusEvent) == 0x000000, "Member 'WBP_PickingGame_ForDisplay_C_OnRemovedFromFocusPath::InFocusEvent' has a wrong offset!");

// Function WBP_PickingGame_ForDisplay.WBP_PickingGame_ForDisplay_C.OnStartGame
// 0x0028 (0x0028 - 0x0000)
struct WBP_PickingGame_ForDisplay_C_OnStartGame final
{
public:
	struct FPalPickingGameSettingData             NewSettingData;                                    // 0x0000(0x0020)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PickingGame_ForDisplay_C_OnStartGame) == 0x000008, "Wrong alignment on WBP_PickingGame_ForDisplay_C_OnStartGame");
static_assert(sizeof(WBP_PickingGame_ForDisplay_C_OnStartGame) == 0x000028, "Wrong size on WBP_PickingGame_ForDisplay_C_OnStartGame");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnStartGame, NewSettingData) == 0x000000, "Member 'WBP_PickingGame_ForDisplay_C_OnStartGame::NewSettingData' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnStartGame, CallFunc_PlayAnimation_ReturnValue) == 0x000020, "Member 'WBP_PickingGame_ForDisplay_C_OnStartGame::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_PickingGame_ForDisplay.WBP_PickingGame_ForDisplay_C.OnStopTurningKey
// 0x0008 (0x0008 - 0x0000)
struct WBP_PickingGame_ForDisplay_C_OnStopTurningKey final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PickingGame_ForDisplay_C_OnStopTurningKey) == 0x000008, "Wrong alignment on WBP_PickingGame_ForDisplay_C_OnStopTurningKey");
static_assert(sizeof(WBP_PickingGame_ForDisplay_C_OnStopTurningKey) == 0x000008, "Wrong size on WBP_PickingGame_ForDisplay_C_OnStopTurningKey");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnStopTurningKey, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'WBP_PickingGame_ForDisplay_C_OnStopTurningKey::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_PickingGame_ForDisplay.WBP_PickingGame_ForDisplay_C.OnSuccessGame
// 0x0038 (0x0038 - 0x0000)
struct WBP_PickingGame_ForDisplay_C_OnSuccessGame final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPalHUDDispatchParameterBase*           CallFunc_GetParam_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPalHUDDispatchParame_PickingGame*      K2Node_DynamicCast_AsPal_HUDDispatch_Parame_Picking_Game; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F85[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PickingGame_ForDisplay_C_OnSuccessGame) == 0x000008, "Wrong alignment on WBP_PickingGame_ForDisplay_C_OnSuccessGame");
static_assert(sizeof(WBP_PickingGame_ForDisplay_C_OnSuccessGame) == 0x000038, "Wrong size on WBP_PickingGame_ForDisplay_C_OnSuccessGame");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnSuccessGame, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'WBP_PickingGame_ForDisplay_C_OnSuccessGame::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnSuccessGame, CallFunc_GetParam_ReturnValue) == 0x000008, "Member 'WBP_PickingGame_ForDisplay_C_OnSuccessGame::CallFunc_GetParam_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnSuccessGame, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'WBP_PickingGame_ForDisplay_C_OnSuccessGame::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnSuccessGame, K2Node_DynamicCast_AsPal_HUDDispatch_Parame_Picking_Game) == 0x000020, "Member 'WBP_PickingGame_ForDisplay_C_OnSuccessGame::K2Node_DynamicCast_AsPal_HUDDispatch_Parame_Picking_Game' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnSuccessGame, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'WBP_PickingGame_ForDisplay_C_OnSuccessGame::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnSuccessGame, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000030, "Member 'WBP_PickingGame_ForDisplay_C_OnSuccessGame::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function WBP_PickingGame_ForDisplay.WBP_PickingGame_ForDisplay_C.OnTimer_Restart
// 0x0020 (0x0020 - 0x0000)
struct WBP_PickingGame_ForDisplay_C_OnTimer_Restart final
{
public:
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F86[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPalPickingGameProcessor*               K2Node_DynamicCast_AsPal_Picking_Game_Processor;   // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PickingGame_ForDisplay_C_OnTimer_Restart) == 0x000008, "Wrong alignment on WBP_PickingGame_ForDisplay_C_OnTimer_Restart");
static_assert(sizeof(WBP_PickingGame_ForDisplay_C_OnTimer_Restart) == 0x000020, "Wrong size on WBP_PickingGame_ForDisplay_C_OnTimer_Restart");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnTimer_Restart, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000000, "Member 'WBP_PickingGame_ForDisplay_C_OnTimer_Restart::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnTimer_Restart, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000008, "Member 'WBP_PickingGame_ForDisplay_C_OnTimer_Restart::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnTimer_Restart, K2Node_DynamicCast_AsPal_Picking_Game_Processor) == 0x000010, "Member 'WBP_PickingGame_ForDisplay_C_OnTimer_Restart::K2Node_DynamicCast_AsPal_Picking_Game_Processor' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnTimer_Restart, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WBP_PickingGame_ForDisplay_C_OnTimer_Restart::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WBP_PickingGame_ForDisplay.WBP_PickingGame_ForDisplay_C.OnUpdateKeyPosition
// 0x0038 (0x0038 - 0x0000)
struct WBP_PickingGame_ForDisplay_C_OnUpdateKeyPosition final
{
public:
	float                                         KeyPositon;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F87[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F88[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRenderTransformAngle_Angle_ImplicitCast; // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F89[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_NotEqual_DoubleDouble_B_ImplicitCast;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NotEqual_DoubleDouble_A_ImplicitCast;     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PickingGame_ForDisplay_C_OnUpdateKeyPosition) == 0x000008, "Wrong alignment on WBP_PickingGame_ForDisplay_C_OnUpdateKeyPosition");
static_assert(sizeof(WBP_PickingGame_ForDisplay_C_OnUpdateKeyPosition) == 0x000038, "Wrong size on WBP_PickingGame_ForDisplay_C_OnUpdateKeyPosition");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnUpdateKeyPosition, KeyPositon) == 0x000000, "Member 'WBP_PickingGame_ForDisplay_C_OnUpdateKeyPosition::KeyPositon' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnUpdateKeyPosition, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000008, "Member 'WBP_PickingGame_ForDisplay_C_OnUpdateKeyPosition::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnUpdateKeyPosition, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x000010, "Member 'WBP_PickingGame_ForDisplay_C_OnUpdateKeyPosition::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnUpdateKeyPosition, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000018, "Member 'WBP_PickingGame_ForDisplay_C_OnUpdateKeyPosition::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnUpdateKeyPosition, CallFunc_SetRenderTransformAngle_Angle_ImplicitCast) == 0x000020, "Member 'WBP_PickingGame_ForDisplay_C_OnUpdateKeyPosition::CallFunc_SetRenderTransformAngle_Angle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnUpdateKeyPosition, CallFunc_NotEqual_DoubleDouble_B_ImplicitCast) == 0x000028, "Member 'WBP_PickingGame_ForDisplay_C_OnUpdateKeyPosition::CallFunc_NotEqual_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnUpdateKeyPosition, CallFunc_NotEqual_DoubleDouble_A_ImplicitCast) == 0x000030, "Member 'WBP_PickingGame_ForDisplay_C_OnUpdateKeyPosition::CallFunc_NotEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function WBP_PickingGame_ForDisplay.WBP_PickingGame_ForDisplay_C.OnUpdatePickingToolPosition
// 0x0048 (0x0048 - 0x0000)
struct WBP_PickingGame_ForDisplay_C_OnUpdatePickingToolPosition final
{
public:
	float                                         ToolPosition;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F8A[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F8B[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast;       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast;    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRenderTransformAngle_Angle_ImplicitCast; // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F8C[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_NearlyEqual_FloatFloat_B_ImplicitCast;    // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PickingGame_ForDisplay_C_OnUpdatePickingToolPosition) == 0x000008, "Wrong alignment on WBP_PickingGame_ForDisplay_C_OnUpdatePickingToolPosition");
static_assert(sizeof(WBP_PickingGame_ForDisplay_C_OnUpdatePickingToolPosition) == 0x000048, "Wrong size on WBP_PickingGame_ForDisplay_C_OnUpdatePickingToolPosition");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnUpdatePickingToolPosition, ToolPosition) == 0x000000, "Member 'WBP_PickingGame_ForDisplay_C_OnUpdatePickingToolPosition::ToolPosition' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnUpdatePickingToolPosition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000004, "Member 'WBP_PickingGame_ForDisplay_C_OnUpdatePickingToolPosition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnUpdatePickingToolPosition, CallFunc_MapRangeClamped_ReturnValue) == 0x000008, "Member 'WBP_PickingGame_ForDisplay_C_OnUpdatePickingToolPosition::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnUpdatePickingToolPosition, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000010, "Member 'WBP_PickingGame_ForDisplay_C_OnUpdatePickingToolPosition::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnUpdatePickingToolPosition, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000018, "Member 'WBP_PickingGame_ForDisplay_C_OnUpdatePickingToolPosition::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnUpdatePickingToolPosition, CallFunc_MapRangeClamped_Value_ImplicitCast) == 0x000020, "Member 'WBP_PickingGame_ForDisplay_C_OnUpdatePickingToolPosition::CallFunc_MapRangeClamped_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnUpdatePickingToolPosition, CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast) == 0x000028, "Member 'WBP_PickingGame_ForDisplay_C_OnUpdatePickingToolPosition::CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnUpdatePickingToolPosition, CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast) == 0x000030, "Member 'WBP_PickingGame_ForDisplay_C_OnUpdatePickingToolPosition::CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnUpdatePickingToolPosition, CallFunc_SetRenderTransformAngle_Angle_ImplicitCast) == 0x000038, "Member 'WBP_PickingGame_ForDisplay_C_OnUpdatePickingToolPosition::CallFunc_SetRenderTransformAngle_Angle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_OnUpdatePickingToolPosition, CallFunc_NearlyEqual_FloatFloat_B_ImplicitCast) == 0x000040, "Member 'WBP_PickingGame_ForDisplay_C_OnUpdatePickingToolPosition::CallFunc_NearlyEqual_FloatFloat_B_ImplicitCast' has a wrong offset!");

// Function WBP_PickingGame_ForDisplay.WBP_PickingGame_ForDisplay_C.SetupEvent
// 0x0080 (0x0080 - 0x0000)
struct WBP_PickingGame_ForDisplay_C_SetupEvent final
{
public:
	TDelegate<void(float ToolPosition)>           K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float KeyPositon)>             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0020(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x0030(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x0040(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(struct FPalPickingGameSettingData& NewSettingData)> K2Node_CreateDelegate_OutputDelegate_5;            // 0x0050(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F8D[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPalPickingGameProcessor*               K2Node_DynamicCast_AsPal_Picking_Game_Processor;   // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PickingGame_ForDisplay_C_SetupEvent) == 0x000008, "Wrong alignment on WBP_PickingGame_ForDisplay_C_SetupEvent");
static_assert(sizeof(WBP_PickingGame_ForDisplay_C_SetupEvent) == 0x000080, "Wrong size on WBP_PickingGame_ForDisplay_C_SetupEvent");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_SetupEvent, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'WBP_PickingGame_ForDisplay_C_SetupEvent::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_SetupEvent, K2Node_CreateDelegate_OutputDelegate_1) == 0x000010, "Member 'WBP_PickingGame_ForDisplay_C_SetupEvent::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_SetupEvent, K2Node_CreateDelegate_OutputDelegate_2) == 0x000020, "Member 'WBP_PickingGame_ForDisplay_C_SetupEvent::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_SetupEvent, K2Node_CreateDelegate_OutputDelegate_3) == 0x000030, "Member 'WBP_PickingGame_ForDisplay_C_SetupEvent::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_SetupEvent, K2Node_CreateDelegate_OutputDelegate_4) == 0x000040, "Member 'WBP_PickingGame_ForDisplay_C_SetupEvent::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_SetupEvent, K2Node_CreateDelegate_OutputDelegate_5) == 0x000050, "Member 'WBP_PickingGame_ForDisplay_C_SetupEvent::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_SetupEvent, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000060, "Member 'WBP_PickingGame_ForDisplay_C_SetupEvent::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_SetupEvent, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000068, "Member 'WBP_PickingGame_ForDisplay_C_SetupEvent::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_SetupEvent, K2Node_DynamicCast_AsPal_Picking_Game_Processor) == 0x000070, "Member 'WBP_PickingGame_ForDisplay_C_SetupEvent::K2Node_DynamicCast_AsPal_Picking_Game_Processor' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_SetupEvent, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'WBP_PickingGame_ForDisplay_C_SetupEvent::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WBP_PickingGame_ForDisplay.WBP_PickingGame_ForDisplay_C.StartForceFeedback
// 0x0010 (0x0010 - 0x0000)
struct WBP_PickingGame_ForDisplay_C_StartForceFeedback final
{
public:
	bool                                          CallFunc_IsGDK_ReturnValue;                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F8E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetLocalPlayerController_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PickingGame_ForDisplay_C_StartForceFeedback) == 0x000008, "Wrong alignment on WBP_PickingGame_ForDisplay_C_StartForceFeedback");
static_assert(sizeof(WBP_PickingGame_ForDisplay_C_StartForceFeedback) == 0x000010, "Wrong size on WBP_PickingGame_ForDisplay_C_StartForceFeedback");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_StartForceFeedback, CallFunc_IsGDK_ReturnValue) == 0x000000, "Member 'WBP_PickingGame_ForDisplay_C_StartForceFeedback::CallFunc_IsGDK_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_StartForceFeedback, CallFunc_GetLocalPlayerController_ReturnValue) == 0x000008, "Member 'WBP_PickingGame_ForDisplay_C_StartForceFeedback::CallFunc_GetLocalPlayerController_ReturnValue' has a wrong offset!");

// Function WBP_PickingGame_ForDisplay.WBP_PickingGame_ForDisplay_C.StartTurnKey
// 0x0018 (0x0018 - 0x0000)
struct WBP_PickingGame_ForDisplay_C_StartTurnKey final
{
public:
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPalPickingGameProcessor*               K2Node_DynamicCast_AsPal_Picking_Game_Processor;   // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PickingGame_ForDisplay_C_StartTurnKey) == 0x000008, "Wrong alignment on WBP_PickingGame_ForDisplay_C_StartTurnKey");
static_assert(sizeof(WBP_PickingGame_ForDisplay_C_StartTurnKey) == 0x000018, "Wrong size on WBP_PickingGame_ForDisplay_C_StartTurnKey");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_StartTurnKey, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000000, "Member 'WBP_PickingGame_ForDisplay_C_StartTurnKey::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_StartTurnKey, K2Node_DynamicCast_AsPal_Picking_Game_Processor) == 0x000008, "Member 'WBP_PickingGame_ForDisplay_C_StartTurnKey::K2Node_DynamicCast_AsPal_Picking_Game_Processor' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_StartTurnKey, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WBP_PickingGame_ForDisplay_C_StartTurnKey::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WBP_PickingGame_ForDisplay.WBP_PickingGame_ForDisplay_C.StopForceFeedback
// 0x0010 (0x0010 - 0x0000)
struct WBP_PickingGame_ForDisplay_C_StopForceFeedback final
{
public:
	bool                                          CallFunc_IsGDK_ReturnValue;                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F8F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetLocalPlayerController_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PickingGame_ForDisplay_C_StopForceFeedback) == 0x000008, "Wrong alignment on WBP_PickingGame_ForDisplay_C_StopForceFeedback");
static_assert(sizeof(WBP_PickingGame_ForDisplay_C_StopForceFeedback) == 0x000010, "Wrong size on WBP_PickingGame_ForDisplay_C_StopForceFeedback");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_StopForceFeedback, CallFunc_IsGDK_ReturnValue) == 0x000000, "Member 'WBP_PickingGame_ForDisplay_C_StopForceFeedback::CallFunc_IsGDK_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_StopForceFeedback, CallFunc_GetLocalPlayerController_ReturnValue) == 0x000008, "Member 'WBP_PickingGame_ForDisplay_C_StopForceFeedback::CallFunc_GetLocalPlayerController_ReturnValue' has a wrong offset!");

// Function WBP_PickingGame_ForDisplay.WBP_PickingGame_ForDisplay_C.StopTurnKey
// 0x0030 (0x0030 - 0x0000)
struct WBP_PickingGame_ForDisplay_C_StopTurnKey final
{
public:
	class UPalHUDService*                         CallFunc_GetHUDService_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F90[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalSoundPlayer*                        CallFunc_GetSoundPlayer_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPalPickingGameProcessor*               K2Node_DynamicCast_AsPal_Picking_Game_Processor;   // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PickingGame_ForDisplay_C_StopTurnKey) == 0x000008, "Wrong alignment on WBP_PickingGame_ForDisplay_C_StopTurnKey");
static_assert(sizeof(WBP_PickingGame_ForDisplay_C_StopTurnKey) == 0x000030, "Wrong size on WBP_PickingGame_ForDisplay_C_StopTurnKey");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_StopTurnKey, CallFunc_GetHUDService_ReturnValue) == 0x000000, "Member 'WBP_PickingGame_ForDisplay_C_StopTurnKey::CallFunc_GetHUDService_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_StopTurnKey, CallFunc_BooleanOR_ReturnValue) == 0x000008, "Member 'WBP_PickingGame_ForDisplay_C_StopTurnKey::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_StopTurnKey, CallFunc_GetSoundPlayer_ReturnValue) == 0x000010, "Member 'WBP_PickingGame_ForDisplay_C_StopTurnKey::CallFunc_GetSoundPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_StopTurnKey, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000018, "Member 'WBP_PickingGame_ForDisplay_C_StopTurnKey::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_StopTurnKey, K2Node_DynamicCast_AsPal_Picking_Game_Processor) == 0x000020, "Member 'WBP_PickingGame_ForDisplay_C_StopTurnKey::K2Node_DynamicCast_AsPal_Picking_Game_Processor' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_StopTurnKey, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'WBP_PickingGame_ForDisplay_C_StopTurnKey::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WBP_PickingGame_ForDisplay.WBP_PickingGame_ForDisplay_C.Tick
// 0x0048 (0x0048 - 0x0000)
struct WBP_PickingGame_ForDisplay_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PickingGame_ForDisplay_C_Tick) == 0x000008, "Wrong alignment on WBP_PickingGame_ForDisplay_C_Tick");
static_assert(sizeof(WBP_PickingGame_ForDisplay_C_Tick) == 0x000048, "Wrong size on WBP_PickingGame_ForDisplay_C_Tick");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_Tick, MyGeometry) == 0x000000, "Member 'WBP_PickingGame_ForDisplay_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_Tick, InDeltaTime) == 0x000040, "Member 'WBP_PickingGame_ForDisplay_C_Tick::InDeltaTime' has a wrong offset!");

// Function WBP_PickingGame_ForDisplay.WBP_PickingGame_ForDisplay_C.UnbindEvent
// 0x0080 (0x0080 - 0x0000)
struct WBP_PickingGame_ForDisplay_C_UnbindEvent final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F91[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalPickingGameProcessor*               K2Node_DynamicCast_AsPal_Picking_Game_Processor;   // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F92[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(float ToolPosition)>           K2Node_CreateDelegate_OutputDelegate_1;            // 0x002C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float KeyPositon)>             K2Node_CreateDelegate_OutputDelegate_2;            // 0x003C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x004C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x005C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(struct FPalPickingGameSettingData& NewSettingData)> K2Node_CreateDelegate_OutputDelegate_5;            // 0x006C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PickingGame_ForDisplay_C_UnbindEvent) == 0x000008, "Wrong alignment on WBP_PickingGame_ForDisplay_C_UnbindEvent");
static_assert(sizeof(WBP_PickingGame_ForDisplay_C_UnbindEvent) == 0x000080, "Wrong size on WBP_PickingGame_ForDisplay_C_UnbindEvent");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_UnbindEvent, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'WBP_PickingGame_ForDisplay_C_UnbindEvent::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_UnbindEvent, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000010, "Member 'WBP_PickingGame_ForDisplay_C_UnbindEvent::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_UnbindEvent, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000018, "Member 'WBP_PickingGame_ForDisplay_C_UnbindEvent::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_UnbindEvent, K2Node_DynamicCast_AsPal_Picking_Game_Processor) == 0x000020, "Member 'WBP_PickingGame_ForDisplay_C_UnbindEvent::K2Node_DynamicCast_AsPal_Picking_Game_Processor' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_UnbindEvent, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'WBP_PickingGame_ForDisplay_C_UnbindEvent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_UnbindEvent, K2Node_CreateDelegate_OutputDelegate_1) == 0x00002C, "Member 'WBP_PickingGame_ForDisplay_C_UnbindEvent::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_UnbindEvent, K2Node_CreateDelegate_OutputDelegate_2) == 0x00003C, "Member 'WBP_PickingGame_ForDisplay_C_UnbindEvent::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_UnbindEvent, K2Node_CreateDelegate_OutputDelegate_3) == 0x00004C, "Member 'WBP_PickingGame_ForDisplay_C_UnbindEvent::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_UnbindEvent, K2Node_CreateDelegate_OutputDelegate_4) == 0x00005C, "Member 'WBP_PickingGame_ForDisplay_C_UnbindEvent::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_UnbindEvent, K2Node_CreateDelegate_OutputDelegate_5) == 0x00006C, "Member 'WBP_PickingGame_ForDisplay_C_UnbindEvent::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");

// Function WBP_PickingGame_ForDisplay.WBP_PickingGame_ForDisplay_C.UpdateKeyHoleTexture
// 0x0058 (0x0058 - 0x0000)
struct WBP_PickingGame_ForDisplay_C_UpdateKeyHoleTexture final
{
public:
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F93[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPalPickingGameProcessor*               K2Node_DynamicCast_AsPal_Picking_Game_Processor;   // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPalPickingGameDifficultyType                 CallFunc_GetDifficultyType_ReturnValue;            // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Contains_ReturnValue;                 // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F94[0x5];                                     // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              CallFunc_Map_Find_Value;                           // 0x0020(0x0030)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PickingGame_ForDisplay_C_UpdateKeyHoleTexture) == 0x000008, "Wrong alignment on WBP_PickingGame_ForDisplay_C_UpdateKeyHoleTexture");
static_assert(sizeof(WBP_PickingGame_ForDisplay_C_UpdateKeyHoleTexture) == 0x000058, "Wrong size on WBP_PickingGame_ForDisplay_C_UpdateKeyHoleTexture");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_UpdateKeyHoleTexture, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000000, "Member 'WBP_PickingGame_ForDisplay_C_UpdateKeyHoleTexture::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_UpdateKeyHoleTexture, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000008, "Member 'WBP_PickingGame_ForDisplay_C_UpdateKeyHoleTexture::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_UpdateKeyHoleTexture, K2Node_DynamicCast_AsPal_Picking_Game_Processor) == 0x000010, "Member 'WBP_PickingGame_ForDisplay_C_UpdateKeyHoleTexture::K2Node_DynamicCast_AsPal_Picking_Game_Processor' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_UpdateKeyHoleTexture, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WBP_PickingGame_ForDisplay_C_UpdateKeyHoleTexture::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_UpdateKeyHoleTexture, CallFunc_GetDifficultyType_ReturnValue) == 0x000019, "Member 'WBP_PickingGame_ForDisplay_C_UpdateKeyHoleTexture::CallFunc_GetDifficultyType_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_UpdateKeyHoleTexture, CallFunc_Map_Contains_ReturnValue) == 0x00001A, "Member 'WBP_PickingGame_ForDisplay_C_UpdateKeyHoleTexture::CallFunc_Map_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_UpdateKeyHoleTexture, CallFunc_Map_Find_Value) == 0x000020, "Member 'WBP_PickingGame_ForDisplay_C_UpdateKeyHoleTexture::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(WBP_PickingGame_ForDisplay_C_UpdateKeyHoleTexture, CallFunc_Map_Find_ReturnValue) == 0x000050, "Member 'WBP_PickingGame_ForDisplay_C_UpdateKeyHoleTexture::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

}

